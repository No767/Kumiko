datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
}

model User {
  id           BigInt        @id @unique
  name         String
  rank         Int           @default(0)
  petals       Int           @default(0)
  date_joined  DateTime      @default(now())
  marketplace  Marketplace? // A user can also optionally own a marketplace
  inv          Inv[] // Give the user a default inventory that has one item that is worth 0 petals
  quests       Quest[] // This default quest may be used to get the user to explore the marketplace
  QuestClaimer QuestClaimer? // A user can only claim one quest
}

model QuestClaimer {
  id         BigInt   @id @unique
  user       User     @relation(fields: [user_id], references: [id])
  user_id    BigInt   @unique
  claimed_at DateTime
  quest      Quest[]
}

model Inv {
  id      BigInt @id @unique
  user    User   @relation(fields: [user_id], references: [id])
  user_id BigInt
}

model Quest {
  id             String       @id @default(uuid())
  author         User         @relation(fields: [author_id], references: [id])
  author_id      BigInt
  claimer        QuestClaimer @relation(fields: [claimer_id], references: [id])
  claimer_id     BigInt
  name           String
  description    String       @db.Text
  reward         Int          @default(0)
  active         Boolean      @default(true)
  claimed        Boolean      @default(false)
  date_created   DateTime     @default(now())
  date_completed DateTime?
  end_datetime   DateTime?
}

model Item {
  id             String      @id @default(uuid())
  marketplace    Marketplace @relation(fields: [marketplace_id], references: [id])
  marketplace_id String
  name           String
  description    String      @db.Text
  price          Float
  amount         Int
}

model Marketplace {
  id           String   @id @default(uuid())
  name         String
  description  String   @db.Text
  date_created DateTime @default(now())
  owner        User     @relation(fields: [owner_id], references: [id])
  owner_id     BigInt   @unique
  items        Item[]
}
