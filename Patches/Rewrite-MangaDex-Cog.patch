From 6593ca7975a08d6fb5cf6b508ec8842cf5cf4be1 Mon Sep 17 00:00:00 2001
From: No767 <73260931+No767@users.noreply.github.com>
Date: Sun, 27 Feb 2022 16:17:17 -0800
Subject: [PATCH] Rewrite MangaDex Cog

---
 Bot/Cogs/mangadex.py | 881 ++++++++-----------------------------------
 1 file changed, 160 insertions(+), 721 deletions(-)

diff --git a/Bot/Cogs/mangadex.py b/Bot/Cogs/mangadex.py
index da29e91..76fc184 100644
--- a/Bot/Cogs/mangadex.py
+++ b/Bot/Cogs/mangadex.py
@@ -40,47 +40,52 @@ class MangaDexV1(commands.Cog):
                         "links",
                         "background",
                     ]
-
-                    for dictItem in data["data"]:
-                        mangaID = dictItem["id"]
-                        embedVar.title = dictItem["attributes"]["title"]["en"]
-                        embedVar.description = dictItem["attributes"]["description"][
-                            "en"
-                        ]
-                        for k, v in dictItem["attributes"].items():
-                            if k not in mangaFilter:
+                    try:
+                        for dictItem in data["data"]:
+                            mangaID = dictItem["id"]
+                            mangaTitle = [val6 for keys6, val6 in dictItem["attributes"]["title"].items()]
+                            mainDesc = [val7 for keys7, val7 in dictItem["attributes"]["description"].items()]
+                            for k, v in dictItem["attributes"].items():
+                                if k not in mangaFilter:
+                                    embedVar.add_field(
+                                        name=k, value=f"[{v}]", inline=True)
+                            for item in dictItem["attributes"]["tags"]:
                                 embedVar.add_field(
-                                    name=k, value=f"[{v}]", inline=True)
-                        for item in dictItem["attributes"]["tags"]:
-                            embedVar.add_field(
-                                name="Tags",
-                                value=f'[{item["attributes"]["name"]["en"]}]',
-                                inline=True,
-                            )
-                        for item1, res in dictItem["attributes"]["links"].items():
-                            embedVar.add_field(
-                                name=item1, value=f"[{res}]", inline=True
-                            )
-                        for titles in dictItem["attributes"]["altTitles"]:
-                            for keys, values in titles.items():
+                                    name="Tags",
+                                    value=f'[{item["attributes"]["name"]["en"]}]',
+                                    inline=True,
+                                )
+                            for item1, res in dictItem["attributes"]["links"].items():
                                 embedVar.add_field(
-                                    name=keys, value=f"[{values}]", inline=True
+                                    name=item1, value=f"[{res}]", inline=True
                                 )
-                        for item in dictItem["relationships"]:
-                            if item["type"] not in ["manga", "author", "artist"]:
-                                coverArtID = item["id"]
-                                async with session.get(
-                                    f"https://api.mangadex.org/cover/{coverArtID}"
-                                ) as rp:
-                                    cover_art_data = await rp.json()
-                                    cover_art = cover_art_data["data"]["attributes"][
-                                        "fileName"
-                                    ]
-                                    embedVar.set_image(
-                                        url=f"https://uploads.mangadex.org/covers/{mangaID}/{cover_art}"
+                            for titles in dictItem["attributes"]["altTitles"]:
+                                for keys, values in titles.items():
+                                    embedVar.add_field(
+                                        name=keys, value=f"[{values}]", inline=True
                                     )
-
-                        await ctx.respond(embed=embedVar)
+                            for item in dictItem["relationships"]:
+                                if item["type"] not in ["manga", "author", "artist"]:
+                                    coverArtID = item["id"]
+                                    async with session.get(
+                                        f"https://api.mangadex.org/cover/{coverArtID}"
+                                    ) as rp:
+                                        cover_art_data = await rp.json()
+                                        cover_art = cover_art_data["data"]["attributes"][
+                                            "fileName"
+                                        ]
+                                        embedVar.set_image(
+                                            url=f"https://uploads.mangadex.org/covers/{mangaID}/{cover_art}"
+                                        )
+                            embedVar.title = str(mangaTitle).replace("'", "").replace("[", "").replace("]", "")
+                            embedVar.description = str(mainDesc).replace("'", "").replace("[", "").replace("]", "")
+                            await ctx.respond(embed=embedVar)
+                    except Exception as e:
+                        embedErrorAlt = discord.Embed()
+                        embedErrorAlt.description = "Sorry, but there was an error. Please try again."
+                        embedErrorAlt.add_field(name="Reason", value=e, inline=True)
+                        embedErrorAlt.add_field(name="HTTP Response Code", value=r.status, inline=True)
+                        await ctx.respond(embed=embedErrorAlt)
 
             except Exception as e:
                 embedVar = discord.Embed()
@@ -97,144 +102,78 @@ class MangaDexV2(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
 
-    @commands.command(name="mangadex-random", aliases=["md-random"])
+    @slash_command(name="mangadex-random", description="Returns a random manga from MangaDex", guild_ids=[866199405090308116])
     async def manga_random(self, ctx):
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
             async with session.get("https://api.mangadex.org/manga/random") as r:
                 data = await r.json()
-                id = data["data"]["id"]
-                cover_art_id = data["data"]["relationships"][2]["id"]
-                async with session.get(
-                    f"https://api.mangadex.org/cover/{cover_art_id}"
-                ) as rp:
-                    cover_art_data = await rp.json()
-                    cover_art = cover_art_data["data"]["attributes"]["fileName"]
-                    try:
-                        if r.status == 500:
-                            embedError = discord.Embed()
-                            embedError.description = (
-                                "Sorry, but there was an error. Please try again"
-                            )
-                            embedError.add_field(
-                                name="Reason",
-                                value=data["errors"][0]["title"],
-                                inline=True,
-                            )
-                            embedError.add_field(
-                                name="Detail",
-                                value=data["errors"][0]["detail"],
-                                inline=True,
-                            )
-                            await ctx.send(embed=embedError)
-                        else:
-                            embedVar = discord.Embed(
-                                title=data["data"]["attributes"]["title"]["en"]
-                            )
-                            embedVar.description = str(
-                                data["data"]["attributes"]["description"]["en"]
-                            ).replace("\n", "")
-                            embedVar.add_field(
-                                name="Alt Titles",
-                                value=str(
-                                    [
-                                        title["en"]
-                                        for title in data["data"]["attributes"][
-                                            "altTitles"
-                                        ]
-                                    ]
-                                ).replace("'", ""),
-                                inline=True,
-                            )
-                            embedVar.add_field(
-                                name="Original Language",
-                                value=str(
-                                    [data["data"]["attributes"]
-                                        ["originalLanguage"]]
-                                ).replace("", ""),
-                                inline=True,
-                            )
-                            embedVar.add_field(
-                                name="Last Volume",
-                                value=str(
-                                    [data["data"]["attributes"]["lastVolume"]]
-                                ).replace("'", ""),
-                                inline=True,
-                            )
-                            embedVar.add_field(
-                                name="Last Chapter",
-                                value=str(
-                                    [data["data"]["attributes"]["lastChapter"]]
-                                ).replace("'", ""),
-                                inline=True,
-                            )
-                            embedVar.add_field(
-                                name="Publication Demographic",
-                                value=data["data"]["attributes"][
-                                    "publicationDemographic"
-                                ],
-                                inline=True,
-                            )
-                            embedVar.add_field(
-                                name="Status",
-                                value=data["data"]["attributes"]["status"],
-                                inline=True,
-                            )
-                            embedVar.add_field(
-                                name="Content Rating",
-                                value=data["data"]["attributes"]["contentRating"],
-                                inline=True,
-                            )
-                            embedVar.add_field(
-                                name="Tags",
-                                value=str(
-                                    [
-                                        item["attributes"]["name"]["en"]
-                                        for item in data["data"]["attributes"]["tags"][
-                                            0:-1
-                                        ]
+                mangaFilter2 = [
+                    "tags",
+                    "title",
+                    "altTitles",
+                    "description",
+                    "links",
+                    "background",
+                ]
+                tagFilter = ["id", "type", "relationships"]
+                embedVar = discord.Embed()
+                try:
+                    if r.status == 500:
+                        embedErrorMain = discord.Embed()
+                        embedErrorMain.description = "It seems like there is no manga to select from... Don't worry about it, just try again"
+                        embedErrorMain.add_field(name="HTTP Response Code", value=r.status, inline=True)
+                        await ctx.respond(embed=embedErrorMain)
+                    else:
+                        mangaTitle2 = [val8 for keys8, val8 in data["data"]["attributes"]["title"].items()]
+                        mainDesc2 = [val9 for keys9, val9 in data["data"]["attributes"]["description"].items()]
+                        for titles in data["data"]["attributes"]["altTitles"]:
+                            allAltTitles = [value for keys, value in titles.items()]
+                        for k, v in data["data"]["attributes"].items():
+                            if k not in mangaFilter2:
+                                embedVar.add_field(name=k, value=v, inline=True)
+                        for keys, value in data["data"]["attributes"]["links"].items():
+                            embedVar.add_field(name=keys, value=value, inline=True)
+                        for tagItem in data["data"]["attributes"]["tags"]:
+                            mainTags = [v["name"]["en"] for k, v in tagItem.items() if k not in tagFilter]
+                        for item in data["data"]["relationships"]:
+                            mangaID2 = data["data"]["id"]
+                            if item["type"] not in ["manga", "author", "artist"]:
+                                coverArtID2 = item["id"]
+                                async with session.get(
+                                    f"https://api.mangadex.org/cover/{coverArtID2}"
+                                ) as rp:
+                                    cover_art_data2 = await rp.json()
+                                    cover_art2 = cover_art_data2["data"]["attributes"][
+                                        "fileName"
                                     ]
-                                )
-                                .replace("\n", "")
-                                .replace("'", ""),
-                                inline=True,
-                            )
-                            embedVar.set_image(
-                                url=f"https://uploads.mangadex.org/covers/{id}/{cover_art}"
-                            )
-                            await ctx.send(embed=embedVar)
-                    except Exception as e:
-                        embedVar = discord.Embed()
-                        embedVar.description = (
-                            f"The query could not be performed. Please try again."
-                        )
-                        embedVar.add_field(name="Reason", value=e, inline=True)
-                        await ctx.send(embed=embedVar)
+                                    embedVar.set_image(
+                                        url=f"https://uploads.mangadex.org/covers/{mangaID2}/{cover_art2}"
+                                    )
+                        embedVar.title = str(mangaTitle2).replace("'", "").replace("[", "").replace("]", "")
+                        embedVar.description = str(mainDesc2).replace("'", "").replace("[", "").replace("]", "")
+                        embedVar.add_field(name="Alt Titles", value=str(allAltTitles).replace("'", ""), inline=True)
+                        embedVar.add_field(name="Tags", value=str(mainTags).replace("'", ""), inline=True)
+                        await ctx.respond(embed=embedVar)
+                except Exception as e:
+                    embedError = discord.Embed()
+                    embedError.description = "Sorry, but something went wrong... Please try again"
+                    embedError.add_field(name="Reason", value=e, inline=True)
+                    embedError.add_field(name="HTTP Response Code", value=r.status, inline=True)
+                    await ctx.respond(embed=embedError)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
-    @manga_random.error
-    async def on_message_error(
-        self, ctx: commands.Context, error: commands.CommandError
-    ):
-        if isinstance(error, commands.MissingRequiredArgument):
-            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
-            embedVar.description = f"Missing a required argument: {error.param}"
-            msg = await ctx.send(embed=embedVar, delete_after=10)
-            await msg.delete(delay=10)
-
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
 
 class MangaDexV3(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
-
-    @commands.command(name="mangadex-scanlation-search", aliases=["md-ss"])
-    async def scanlation_search(self, ctx, *, search: str):
+    @slash_command(name="mangadex-scanlation-search", description="Returns info about a scanlation group on MangaDex", guild_ids=[866199405090308116])
+    async def scanlation_search(self, ctx, *, name: Option(str, "The name of the scanlation group")):
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
             params = {
-                "limit": 1,
-                "name": search,
+                "limit": 5,
+                "name": name,
                 "order[name]": "asc",
                 "order[relevance]": "desc",
             }
@@ -242,6 +181,8 @@ class MangaDexV3(commands.Cog):
                 "https://api.mangadex.org/group", params=params
             ) as totally_another_response:
                 md_data2 = await totally_another_response.json()
+                embed2 = discord.Embed()
+                mdFilter = ["altNames", "description", "name"]
                 try:
                     if md_data2["data"] is None:
                         embed1 = discord.Embed()
@@ -256,107 +197,32 @@ class MangaDexV3(commands.Cog):
                             value=totally_another_response.status,
                             inline=True,
                         )
-                        await ctx.send(embed=embed1)
+                        await ctx.respond(embed=embed1)
                     else:
-                        embed2 = discord.Embed()
-                        embed2.title = md_data2["data"][0]["attributes"]["name"]
-                        embed2.description = md_data2["data"][0]["attributes"][
-                            "description"
-                        ]
-                        embed2.add_field(
-                            name="Alt Names",
-                            value=md_data2["data"][0]["attributes"]["altNames"],
-                            inline=True,
-                        )
-                        embed2.add_field(
-                            name="Website",
-                            value=str(
-                                [md_data2["data"][0]["attributes"]["website"]]
-                            ).replace("'", ""),
-                            inline=True,
-                        )
-                        embed2.add_field(
-                            name="IRC Server",
-                            value=md_data2["data"][0]["attributes"]["ircServer"],
-                            inline=True,
-                        )
-                        embed2.add_field(
-                            name="Discord",
-                            value=f"https://discord.gg/{md_data2['data'][0]['attributes']['discord']}",
-                            inline=True,
-                        )
-                        embed2.add_field(
-                            name="Contact Email",
-                            value=str(
-                                [md_data2["data"][0]["attributes"]["contactEmail"]]
-                            ).replace("'", ""),
-                            inline=True,
-                        )
-                        embed2.add_field(
-                            name="Twitter",
-                            value=md_data2["data"][0]["attributes"]["twitter"],
-                            inline=True,
-                        )
-                        embed2.add_field(
-                            name="Focused Languages",
-                            value=md_data2["data"][0]["attributes"]["focusedLanguages"],
-                            inline=True,
-                        )
-                        embed2.add_field(
-                            name="Official",
-                            value=md_data2["data"][0]["attributes"]["official"],
-                            inline=True,
-                        )
-                        embed2.add_field(
-                            name="Verified",
-                            value=md_data2["data"][0]["attributes"]["verified"],
-                            inline=True,
-                        )
-                        embed2.add_field(
-                            name="Created At",
-                            value=md_data2["data"][0]["attributes"]["createdAt"],
-                            inline=True,
-                        )
-                        embed2.add_field(
-                            name="Updated At",
-                            value=md_data2["data"][0]["attributes"]["updatedAt"],
-                            inline=True,
-                        )
-                        embed2.add_field(
-                            name="Inactive",
-                            value=md_data2["data"][0]["attributes"]["inactive"],
-                            inline=True,
-                        )
-                        await ctx.send(embed=embed2)
+                        for dictItem in md_data2["data"]:
+                            embed2.title = dictItem["attributes"]["name"]
+                            embed2.description = dictItem["attributes"]["description"]
+                            for k, v in dictItem["attributes"].items():
+                                if k not in mdFilter:
+                                    embed2.add_field(name=k, value=v, inline=True)
+                            await ctx.respond(embed=embed2)
                 except Exception as e:
                     embedVar = discord.Embed()
                     embedVar.description = (
                         f"The query could not be performed. Please try again."
                     )
                     embedVar.add_field(name="Reason", value=e, inline=True)
-                    await ctx.send(embed=embedVar)
-
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
-
-    @scanlation_search.error
-    async def on_message_error(
-        self, ctx: commands.Context, error: commands.CommandError
-    ):
-        if isinstance(error, commands.MissingRequiredArgument):
-            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
-            embedVar.description = f"Missing a required argument: {error.param}"
-            msg = await ctx.send(embed=embedVar, delete_after=10)
-            await msg.delete(delay=10)
+                    await ctx.respond(embed=embedVar)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
 
 class MangaDexV4(commands.Cog):
-    def __init__(self, bot: commands.Bot):
+    def __init__(self, bot):
         self.bot = bot
-
-    @commands.command(name="mangadex-scanlation-id", aliases=["md-si"])
-    async def scanlation_id(self, ctx, *, scanlation_id: str):
+    
+    @slash_command(name="mangadex-scanlation-id", description="Returns info about a scanlation group on MangaDex (Done via ID)", guild_ids=[866199405090308116])
+    async def scanlation_id(self, ctx, *, scanlation_id: Option(str, "The ID of the scanlation group")):
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
             async with session.get(
                 f"https://api.mangadex.org/group/{scanlation_id}"
@@ -364,109 +230,35 @@ class MangaDexV4(commands.Cog):
                 payload = await another_response.json()
                 try:
                     if payload["data"] is None:
-                        embed1 = discord.Embed()
-                        embed1.description = (
+                        embed3 = discord.Embed()
+                        embed3.description = (
                             "Sorry, but no results were found... Please try again."
                         )
-                        embed1.add_field(
+                        embed3.add_field(
                             name="Total", value=payload["total"], inline=True
                         )
-                        embed1.add_field(
+                        embed3.add_field(
                             name="HTTP Status",
                             value=another_response.status,
                             inline=True,
                         )
-                        await ctx.send(embed=embed1)
+                        await ctx.respond(embed=embed3)
                     else:
-                        embed2 = discord.Embed()
-                        embed2.title = payload["data"]["attributes"]["name"]
-                        embed2.description = payload["data"]["attributes"][
-                            "description"
-                        ]
-                        embed2.add_field(
-                            name="Alt Names",
-                            value=payload["data"]["attributes"]["altNames"],
-                            inline=True,
-                        )
-                        embed2.add_field(
-                            name="Website",
-                            value=str(
-                                [payload["data"]["attributes"]["website"]]
-                            ).replace("'", ""),
-                            inline=True,
-                        )
-                        embed2.add_field(
-                            name="IRC Server",
-                            value=payload["data"]["attributes"]["ircServer"],
-                            inline=True,
-                        )
-                        embed2.add_field(
-                            name="Discord",
-                            value=f"https://discord.gg/{payload['data']['attributes']['discord']}",
-                            inline=True,
-                        )
-                        embed2.add_field(
-                            name="Contact Email",
-                            value=str(
-                                [payload["data"]["attributes"]["contactEmail"]]
-                            ).replace("'", ""),
-                            inline=True,
-                        )
-                        embed2.add_field(
-                            name="Twitter",
-                            value=payload["data"]["attributes"]["twitter"],
-                            inline=True,
-                        )
-                        embed2.add_field(
-                            name="Focused Languages",
-                            value=payload["data"]["attributes"]["focusedLanguages"],
-                            inline=True,
-                        )
-                        embed2.add_field(
-                            name="Official",
-                            value=payload["data"]["attributes"]["official"],
-                            inline=True,
-                        )
-                        embed2.add_field(
-                            name="Verified",
-                            value=payload["data"]["attributes"]["verified"],
-                            inline=True,
-                        )
-                        embed2.add_field(
-                            name="Created At",
-                            value=payload["data"]["attributes"]["createdAt"],
-                            inline=True,
-                        )
-                        embed2.add_field(
-                            name="Updated At",
-                            value=payload["data"]["attributes"]["updatedAt"],
-                            inline=True,
-                        )
-                        embed2.add_field(
-                            name="Inactive",
-                            value=payload["data"]["attributes"]["inactive"],
-                            inline=True,
-                        )
-                        await ctx.send(embed=embed2)
+                        embed4 = discord.Embed()
+                        mdFilter2 = ["altNames", "description", "name"]
+                        embed4.title = payload["data"]["attributes"]["name"]
+                        embed4.description = payload["data"]["attributes"]["description"]
+                        for k, v in payload["data"]["attributes"].items():
+                            if k not in mdFilter2:
+                                embed4.add_field(name=k, value=v, inline=True)
+                        await ctx.respond(embed=embed4)
                 except Exception as e:
                     embedVar = discord.Embed()
                     embedVar.description = (
                         f"The query could not be performed. Please try again."
                     )
                     embedVar.add_field(name="Reason", value=e, inline=True)
-                    await ctx.send(embed=embedVar)
-
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
-
-    @scanlation_id.error
-    async def on_message_error(
-        self, ctx: commands.Context, error: commands.CommandError
-    ):
-        if isinstance(error, commands.MissingRequiredArgument):
-            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
-            embedVar.description = f"Missing a required argument: {error.param}"
-            msg = await ctx.send(embed=embedVar, delete_after=10)
-            await msg.delete(delay=10)
+                    await ctx.respond(embed=embedVar)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
@@ -475,44 +267,29 @@ class MangaDexV5(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
 
-    @commands.command(name="mangadex-user", aliases=["md-user"])
-    async def user(self, ctx, *, user_id: str):
+    @slash_command(name="mangadex-user", description="Returns info about a user on MangaDex", guild_ids=[866199405090308116])
+    async def user(self, ctx, *, user_id: Option(str, "The ID of the user")):
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
             async with session.get(f"https://api.mangadex.org/user/{user_id}") as rep:
                 payload = await rep.json()
                 try:
                     embed = discord.Embed()
+                    mainFilter = ["attributes", "relationships"]
                     embed.title = payload["data"]["attributes"]["username"]
-                    embed.add_field(
-                        name="ID", value=payload["data"]["id"], inline=True)
-                    embed.add_field(
-                        name="Type", value=payload["data"]["type"], inline=True
-                    )
-                    embed.add_field(
-                        name="Roles",
-                        value=payload["data"]["attributes"]["roles"],
-                        inline=True,
-                    )
-                    await ctx.send(embed=embed)
+                    for payloadKeys, payloadValues in payload["data"].items():
+                        if payloadKeys not in mainFilter:
+                            embed.add_field(name=payloadKeys, value=payloadValues, inline=True)
+                    for k, v in payload["data"]["attributes"].items():
+                        if k not in "username":
+                            embed.add_field(name=k, value=v, inline=True)
+                    await ctx.respond(embed=embed)
                 except Exception as e:
                     embedVar = discord.Embed()
                     embedVar.description = (
                         f"The query could not be performed. Please try again."
                     )
                     embedVar.add_field(name="Reason", value=e, inline=True)
-                    await ctx.send(embed=embedVar)
-
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
-
-    @user.error
-    async def on_message_error(
-        self, ctx: commands.Context, error: commands.CommandError
-    ):
-        if isinstance(error, commands.MissingRequiredArgument):
-            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
-            embedVar.description = f"Missing a required argument: {error.param}"
-            msg = await ctx.send(embed=embedVar, delete_after=10)
-            await msg.delete(delay=10)
+                    await ctx.respond(embed=embedVar)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
@@ -521,385 +298,48 @@ class MangaDexV6(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
 
-    @commands.command(name="mangadex-author", aliases=["md-author"])
-    async def author(self, ctx, *, author_name: str):
+    @slash_command(name="mangadex-author", description="Returns info about an author on MangaDex", guild_ids=[866199405090308116])
+    async def author(self, ctx, *, author_name: Option(str, "The name of the author")):
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
-            params = {"limit": 1, "name": author_name, "order[name]": "asc"}
+            params = {"limit": 5, "name": author_name, "order[name]": "asc"}
             async with session.get(
                 "https://api.mangadex.org/author", params=params
             ) as author_response:
                 author_payload = await author_response.json()
+                embedVar = discord.Embed()
                 try:
-                    if author_payload["data"][0]["attributes"]["imageUrl"] is None:
-                        embedVar = discord.Embed()
-                        embedVar.title = author_payload["data"][0]["attributes"]["name"]
-                        embedVar.description = author_payload["data"][0]["attributes"][
-                            "biography"
-                        ]
-                        embedVar.add_field(
-                            name="ID",
-                            value=author_payload["data"][0]["id"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Twitter",
-                            value=author_payload["data"][0]["attributes"]["twitter"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Pixiv",
-                            value=author_payload["data"][0]["attributes"]["pixiv"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="MelonBook",
-                            value=author_payload["data"][0]["attributes"]["melonBook"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="FanBox",
-                            value=author_payload["data"][0]["attributes"]["fanBox"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Booth",
-                            value=author_payload["data"][0]["attributes"]["booth"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="NicoVideo",
-                            value=author_payload["data"][0]["attributes"]["nicoVideo"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Skeb",
-                            value=author_payload["data"][0]["attributes"]["skeb"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Fantia",
-                            value=author_payload["data"][0]["id"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Tumblr",
-                            value=author_payload["data"][0]["attributes"]["tumblr"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="YouTube",
-                            value=author_payload["data"][0]["attributes"]["youtube"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Website",
-                            value=author_payload["data"][0]["attributes"]["website"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Created At",
-                            value=author_payload["data"][0]["attributes"]["createdAt"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Updated At",
-                            value=author_payload["data"][0]["attributes"]["updatedAt"],
-                            inline=True,
-                        )
-                        await ctx.send(embed=embedVar)
-                    else:
-                        embedVar2 = discord.Embed()
-                        embedVar2.title = author_payload["data"][0]["attributes"][
-                            "name"
-                        ]
-                        embedVar2.description = author_payload["data"][0]["attributes"][
-                            "biography"
-                        ]
-                        embedVar2.add_field(
-                            name="ID",
-                            value=author_payload["data"][0]["id"],
-                            inline=True,
-                        )
-                        embedVar2.add_field(
-                            name="Twitter",
-                            value=author_payload["data"][0]["attributes"]["twitter"],
-                            inline=True,
-                        )
-                        embedVar2.add_field(
-                            name="Pixiv",
-                            value=author_payload["data"][0]["attributes"]["pixiv"],
-                            inline=True,
-                        )
-                        embedVar2.add_field(
-                            name="MelonBook",
-                            value=author_payload["data"][0]["attributes"]["melonbook"],
-                            inline=True,
-                        )
-                        embedVar2.add_field(
-                            name="FanBox",
-                            value=author_payload["data"][0]["attributes"]["fanbox"],
-                            inline=True,
-                        )
-                        embedVar2.add_field(
-                            name="Booth",
-                            value=author_payload["data"][0]["attributes"]["booth"],
-                            inline=True,
-                        )
-                        embedVar2.add_field(
-                            name="NicoVideo",
-                            value=author_payload["data"][0]["attributes"]["nico"],
-                            inline=True,
-                        )
-                        embedVar2.add_field(
-                            name="Sekb",
-                            value=author_payload["data"][0]["attributes"]["sekb"],
-                            inline=True,
-                        )
-                        embedVar2.add_field(
-                            name="Fantia",
-                            value=author_payload["data"][0]["id"],
-                            inline=True,
-                        )
-                        embedVar2.add_field(
-                            name="Tumblr",
-                            value=author_payload["data"][0]["attributes"]["tumblr"],
-                            inline=True,
-                        )
-                        embedVar2.add_field(
-                            name="YouTube",
-                            value=author_payload["data"][0]["attributes"]["youtube"],
-                            inline=True,
-                        )
-                        embedVar2.add_field(
-                            name="Website",
-                            value=author_payload["data"][0]["attributes"]["website"],
-                            inline=True,
-                        )
-                        embedVar2.add_field(
-                            name="Created At",
-                            value=author_payload["data"][0]["attributes"]["createdAt"],
-                            inline=True,
-                        )
-                        embedVar2.add_field(
-                            name="Updated At",
-                            value=author_payload["data"][0]["attributes"]["updatedAt"],
-                            inline=True,
-                        )
-                        embedVar2.set_image(
-                            url=author_payload["data"][0]["attributes"]["imageUrl"]
-                        )
-                        await ctx.send(embed=embedVar2)
-                except Exception as e:
-                    embedVar = discord.Embed()
-                    embedVar.description = (
-                        f"The query could not be performed. Please try again."
-                    )
-                    embedVar.add_field(name="Reason", value=e, inline=True)
-                    await ctx.send(embed=embedVar)
-
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
-
-    @author.error
-    async def on_message_error(
-        self, ctx: commands.Context, error: commands.CommandError
-    ):
-        if isinstance(error, commands.MissingRequiredArgument):
-            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
-            embedVar.description = f"Missing a required argument: {error.param}"
-            msg = await ctx.send(embed=embedVar, delete_after=10)
-            await msg.delete(delay=10)
-
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
-
-
-class MangaDexV7(commands.Cog):
-    def __init__(self, bot):
-        self.bot = bot
-
-    @commands.command(name="mangadex-author-id", aliases=["md-author-id"])
-    async def author_id(self, ctx, *, author_id: str):
-        async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
-            async with session.get(
-                f"https://api.mangadex.org/author/{author_id}"
-            ) as author_r:
-                author_data = await author_r.json()
-                try:
-                    if author_data["data"]["attributes"]["imageUrl"] is None:
-                        embedVar = discord.Embed()
-                        embedVar.title = author_data["data"]["attributes"]["name"]
-                        embedVar.description = author_data["data"]["attributes"][
-                            "biography"
-                        ]
-                        embedVar.add_field(
-                            name="ID", value=author_data["data"]["id"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="Twitter",
-                            value=author_data["data"]["attributes"]["twitter"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Pixiv",
-                            value=author_data["data"]["attributes"]["pixiv"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="MelonBook",
-                            value=author_data["data"]["attributes"]["melonBook"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="FanBox",
-                            value=author_data["data"]["attributes"]["fanBox"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Booth",
-                            value=author_data["data"]["attributes"]["booth"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="NicoVideo",
-                            value=author_data["data"]["attributes"]["nicoVideo"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Skeb",
-                            value=author_data["data"]["attributes"]["skeb"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Fantia", value=author_data["data"]["id"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="Tumblr",
-                            value=author_data["data"]["attributes"]["tumblr"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="YouTube",
-                            value=author_data["data"]["attributes"]["youtube"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Website",
-                            value=author_data["data"]["attributes"]["website"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Created At",
-                            value=author_data["data"]["attributes"]["createdAt"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Updated At",
-                            value=author_data["data"]["attributes"]["updatedAt"],
-                            inline=True,
-                        )
-                        await ctx.send(embed=embedVar)
-                    else:
-                        embedVar2 = discord.Embed()
-                        embedVar2.title = author_data["data"]["attributes"]["name"]
-                        embedVar2.description = author_data["data"]["attributes"][
-                            "biography"
-                        ]
-                        embedVar2.add_field(
-                            name="ID", value=author_data["data"]["id"], inline=True
-                        )
-                        embedVar2.add_field(
-                            name="Twitter",
-                            value=author_data["data"]["attributes"]["twitter"],
-                            inline=True,
-                        )
-                        embedVar2.add_field(
-                            name="Pixiv",
-                            value=author_data["data"]["attributes"]["pixiv"],
-                            inline=True,
-                        )
-                        embedVar2.add_field(
-                            name="MelonBook",
-                            value=author_data["data"]["attributes"]["melonbook"],
-                            inline=True,
-                        )
-                        embedVar2.add_field(
-                            name="FanBox",
-                            value=author_data["data"]["attributes"]["fanbox"],
-                            inline=True,
-                        )
-                        embedVar2.add_field(
-                            name="Booth",
-                            value=author_data["data"]["attributes"]["booth"],
-                            inline=True,
-                        )
-                        embedVar2.add_field(
-                            name="NicoVideo",
-                            value=author_data["data"]["attributes"]["nico"],
-                            inline=True,
-                        )
-                        embedVar2.add_field(
-                            name="Sekb",
-                            value=author_data["data"]["attributes"]["sekb"],
-                            inline=True,
-                        )
-                        embedVar2.add_field(
-                            name="Fantia", value=author_data["data"]["id"], inline=True
-                        )
-                        embedVar2.add_field(
-                            name="Tumblr",
-                            value=author_data["data"]["attributes"]["tumblr"],
-                            inline=True,
-                        )
-                        embedVar2.add_field(
-                            name="YouTube",
-                            value=author_data["data"]["attributes"]["youtube"],
-                            inline=True,
-                        )
-                        embedVar2.add_field(
-                            name="Website",
-                            value=author_data["data"]["attributes"]["website"],
-                            inline=True,
-                        )
-                        embedVar2.add_field(
-                            name="Created At",
-                            value=author_data["data"]["attributes"]["createdAt"],
-                            inline=True,
-                        )
-                        embedVar2.add_field(
-                            name="Updated At",
-                            value=author_data["data"]["attributes"]["updatedAt"],
-                            inline=True,
-                        )
-                        embedVar2.set_image(
-                            url=author_data["data"]["attributes"]["imageUrl"]
-                        )
-                        await ctx.send(embed=embedVar2)
+                    authorFilter = ["imageUrl", "name", "biography"]
+                    mainFilterV3 = ["attributes", "relationships", "type"]
+                    for authorDictItem in author_payload["data"]:
+                        embedVar.title = authorDictItem["attributes"]["name"]
+                        embedVar.description = authorDictItem["attributes"]["biography"]
+                        for keys, value in authorDictItem.items():
+                            if keys not in mainFilterV3:
+                                embedVar.add_field(name=keys, value=value, inline=True)
+                                embedVar.remove_field(17)
+                        for k, v in authorDictItem["attributes"].items():
+                            if k not in authorFilter:
+                                embedVar.add_field(name=k, value=v, inline=True)
+                                embedVar.remove_field(17)
+                        
+                        await ctx.respond(embed=embedVar)
                 except Exception as e:
                     embedVar = discord.Embed()
                     embedVar.description = (
                         f"The query could not be performed. Please try again."
                     )
                     embedVar.add_field(name="Reason", value=e, inline=True)
-                    await ctx.send(embed=embedVar)
+                    await ctx.respond(embed=embedVar)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
-    @author_id.error
-    async def on_message_error(
-        self, ctx: commands.Context, error: commands.CommandError
-    ):
-        if isinstance(error, commands.MissingRequiredArgument):
-            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
-            embedVar.description = f"Missing a required argument: {error.param}"
-            msg = await ctx.send(embed=embedVar, delete_after=10)
-            await msg.delete(delay=10)
-
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
 
 class MangaDexReaderV1(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
 
+    # Note that the MangaDex Reader has been saved for another release. v2.0.0 will not contain the mangadex reader
     # Later this should allow for the name to be inputted, but for now it purely relies on the chapter id
     @commands.command(name="mangadex-read", aliases=["md-read"])
     async def manga_read(self, ctx, *, id: str):
@@ -940,4 +380,3 @@ def setup(bot):
     bot.add_cog(MangaDexV4(bot))
     bot.add_cog(MangaDexV5(bot))
     bot.add_cog(MangaDexV6(bot))
-    bot.add_cog(MangaDexV7(bot))
-- 
2.35.1

