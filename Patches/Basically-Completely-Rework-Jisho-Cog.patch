From 5c70cae7c5bcf8220e2edda315ddfeca1e699cb7 Mon Sep 17 00:00:00 2001
From: No767 <73260931+No767@users.noreply.github.com>
Date: Sat, 26 Feb 2022 20:44:15 -0800
Subject: [PATCH] Basically Completely Rework Jisho Cog

yep pretty much all of it has been reworked...
---
 Bot/Cogs/jisho.py | 143 ++++++++++------------------------------------
 1 file changed, 29 insertions(+), 114 deletions(-)

diff --git a/Bot/Cogs/jisho.py b/Bot/Cogs/jisho.py
index 5cd0f29..b793388 100644
--- a/Bot/Cogs/jisho.py
+++ b/Bot/Cogs/jisho.py
@@ -1,140 +1,55 @@
 import asyncio
-import re
 
 import aiohttp
 import discord
 import orjson
 import uvloop
 from discord.ext import commands
-from jamdict import Jamdict
+from discord.commands import slash_command, Option
 
-jam = Jamdict()
 
-
-def kanjiv2(search):
-    res = jam.lookup(search.replace("\n", " "))
-    for c in res.chars:
-        return str(c).replace("\n", " ")
-
-
-def hiragana(search):
-    result = jam.lookup(search)
-    for word in result.entries:
-        m = re.findall("[ぁ-ん]", str(word))
-        r = str(m).replace("'", "").replace(",", "").replace(" ", "")
-        return str(r)
-
-
-def katakana(search):
-    result = jam.lookup(search.replace("\n", " "))
-    for entry in result.entries:
-        m = re.findall("[ァ-ン]", str(entry))
-        r = (
-            str(m)
-            .replace("[", " ")
-            .replace("]", " ")
-            .replace("'", " ")
-            .replace(",", "")
-            .replace(" ", "")
-        )
-        return str(r)
-
-
-def searcher(search):
-    result = jam.lookup(search)
-    for word in result.entries:
-        return str(word[4:10])
-
-
-def better_hiragana(search):
-    searcher(search)
-
-
-class jisho_dict(commands.Cog):
+class jishoDict(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
 
-    @commands.command(name="jisho")
-    async def jisho(self, ctx, search: str):
+    @slash_command(name="jisho", description="Searches for words on Jisho", guild_ids=[866199405090308116])
+    async def jishoSearcher(self, ctx, search: Option(str, "The word you want to search for. It could be in either English or Japanese.")):
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
             params = {"keyword": search}
             async with session.get(
                 "https://jisho.org/api/v1/search/words", params=params
             ) as r:
                 jisho = await r.json()
+                engDefFilter = ["parts_of_speech", "links", "tags", "restrictions", "see_also", "antonyms", "source",
+                                "info", "sentences"]
+                sensesFilter = ["restrictions", "english_definitions", "sentences", "links"]
                 try:
-                    res = jam.lookup(search)
                     embedVar = discord.Embed()
-                    embedVar.add_field(
-                        name="Kanji",
-                        value=[str(c).replace("'", "") for c in res.chars],
-                        inline=True,
-                    )
-                    embedVar.add_field(
-                        name="Position of Speech (POS)",
-                        value=jisho["data"][0]["senses"][0]["parts_of_speech"],
-                        inline=True,
-                    )
-                    embedVar.add_field(
-                        name="Is Common?",
-                        value=jisho["data"][0]["is_common"],
-                        inline=True,
-                    )
-                    embedVar.add_field(
-                        name="Tags", value=jisho["data"][0]["tags"], inline=True
-                    )
-                    embedVar.add_field(
-                        name="JLPT", value=jisho["data"][0]["jlpt"], inline=True
-                    )
-                    embedVar.add_field(
-                        name="Antonmys",
-                        value=jisho["data"][0]["senses"][0]["antonyms"],
-                        inline=True,
-                    )
-                    embedVar.add_field(
-                        name="See Also",
-                        value=jisho["data"][0]["senses"][0]["see_also"],
-                        inline=True,
-                    )
-                    embedVar.add_field(
-                        name="Links",
-                        value=jisho["data"][0]["senses"][0]["links"],
-                        inline=True,
-                    )
-
-                    embedVar.add_field(
-                        name="Attributions",
-                        value=f"JMDict >> {jisho['data'][0]['attribution']['jmdict']}\nJMNEDict >> {jisho['data'][0]['attribution']['jmnedict']}\nDBPedia >> {jisho['data'][0]['attribution']['dbpedia']}",
-                        inline=True,
-                    )
-                    embedVar.add_field(
-                        name="HTTP Status (Jisho API)",
-                        value=r.status,
-                        inline=True,
-                    )
-                    embedVar.description = str(
-                        [str(word[0]) for word in res.entries])
-                    await ctx.send(embed=embedVar)
+                    for dictItem in jisho["data"]:
+                        for jpnItem in dictItem["japanese"]:
+                            totalJpnItem = [value for keys, value in jpnItem.items()]
+                        for itemVal in dictItem["senses"]:
+                            for keys, value in itemVal.items():
+                                if keys not in engDefFilter:
+                                    valueItem = value
+                        for valOfItem in dictItem["senses"]:
+                            for item3, res3, in valOfItem.items():
+                                if item3 not in sensesFilter:
+                                    embedVar.insert_field_at(index=1, name=item3, value=str(res3).replace("'", ""), inline=True)
+                                    embedVar.remove_field(6)
+                            
+                        embedVar.title = str(totalJpnItem).replace("'", "").replace("[", "").replace("]", "")
+                        embedVar.description = str(valueItem).replace("'", "").replace("[", "").replace("]", "")
+                        await ctx.respond(embed=embedVar)
                 except Exception as e:
-                    embed_discord = discord.Embed()
-                    embed_discord.description = (
-                        f"An error has occurred. Please try again\nReason: {e}"
-                    )
-                    await ctx.send(embed=embed_discord)
-
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
-
-    @jisho.error
-    async def on_message_error(
-        self, ctx: commands.Context, error: commands.CommandError
-    ):
-        if isinstance(error, commands.MissingRequiredArgument):
-            embed_discord = discord.Embed()
-            embed_discord.description = f"Missing a requireed argument: {error.param}"
-            await ctx.send(embed=embed_discord)
+                    embedError = discord.Embed()
+                    embedError.description = "There was an error with your search. Please try again"
+                    embedError.add_field(name="Error", value=e, inline=True)
+                    embedError.add_field(name="HTTP Status Code", value=jisho.status, inline=True)
+                    await ctx.respond(embed=embedError)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
 
 def setup(bot):
-    bot.add_cog(jisho_dict(bot))
+    bot.add_cog(jishoDict(bot))
-- 
2.35.1

