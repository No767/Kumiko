From c31a8737724971592375b76c29233e6fc0ff5c9a Mon Sep 17 00:00:00 2001
From: No767 <73260931+No767@users.noreply.github.com>
Date: Tue, 15 Feb 2022 23:34:41 -0800
Subject: [PATCH] Use Recursion for Hypixel Cog + Remove Old Commands

adjust rinhelp to remove some old commands and finally the hypixel cog is now going rlly fast
---
 Bot/Cogs/hypixel.py | 337 +++++++++++---------------------------------
 Bot/Cogs/rinhelp.py | 109 ++++----------
 Bot/Cogs/tenor.py   |   1 -
 3 files changed, 110 insertions(+), 337 deletions(-)

diff --git a/Bot/Cogs/hypixel.py b/Bot/Cogs/hypixel.py
index 24486e7..345d93e 100644
--- a/Bot/Cogs/hypixel.py
+++ b/Bot/Cogs/hypixel.py
@@ -7,6 +7,7 @@ import orjson
 import uvloop
 from discord.ext import commands
 from dotenv import load_dotenv
+from discord.commands import slash_command
 
 load_dotenv()
 
@@ -16,92 +17,45 @@ hypixel_api_key = os.getenv("Hypixel_API_Key")
 class hypixel_api(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
-
-    @commands.command(name="hypixel")
-    async def hypixel(self, ctx, *, uuid: str):
+        
+    @slash_command(name="hypixel-user", description="Returns Info About A Minecraft User on Hypixel", guild_ids=[866199405090308116])
+    async def hypixel_user(self, ctx, *, uuid: str):
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
             params = {"uuid": uuid, "key": hypixel_api_key}
             async with session.get(
                 "https://api.hypixel.net/player", params=params
             ) as r:
                 player = await r.json()
-                async with aiohttp.ClientSession(
-                    json_serialize=orjson.dumps
-                ) as session1:
-                    params = {"uuid": uuid, "key": hypixel_api_key}
-                    async with session1.get(
-                        "https://api.hypixel.net/status", params=params
-                    ) as r1:
-                        online = await r1.json()
-                        http_statusv1 = r.status
-                        try:
-                            if str(player["success"]) == "True":
-                                discord_embed = discord.Embed(
-                                    title="Player Info",
-                                    color=discord.Color.from_rgb(
-                                        186, 244, 255),
-                                )
-                                discord_embed.add_field(
-                                    name="Username",
-                                    value=player["player"]["displayname"],
-                                    inline=True,
-                                )
-                                discord_embed.add_field(
-                                    name="ID",
-                                    value=player["player"]["_id"],
-                                    inline=True,
-                                )
-                                discord_embed.add_field(
-                                    name="UUID",
-                                    value=player["player"]["uuid"],
-                                    inline=True,
-                                )
-                                discord_embed.add_field(
-                                    name="Known Aliases",
-                                    value=str(player["player"]["knownAliases"])
-                                    .replace("'", "")
-                                    .replace("[", "")
-                                    .replace("]", ""),
-                                    inline=True,
-                                )
-                                discord_embed.add_field(
-                                    name="Online Status",
-                                    value=online["session"]["online"],
-                                    inline=True,
-                                )
-                                discord_embed.add_field(
-                                    name="Success or Not?",
-                                    value=player["success"],
-                                    inline=True,
-                                )
+                try:
+                    if str(player["success"]) == "True":
+                        discord_embed = discord.Embed(
+                            title="Player Info",
+                            color=discord.Color.from_rgb(
+                                186, 244, 255),
+                        )
+                        filter = ["achievements", "achievementsOneTime", "stats", "petConsumables",
+                                  "monthlycrates", "parkourCheckpointBests", "parkourCompletions", "quests",
+                                  "housingMeta", "firstLogin", "lastLogin", "knownAliasesLower", "vanityMeta",
+                                  "lastAdsenseGenerateTime", "lastLogout", "challenges", "adventRewards2020",
+                                  "achievementRewardsNew", "adsense_tokens"]
+                        for key, value in player["player"].items():
+                            if key not in filter:
                                 discord_embed.add_field(
-                                    name="HTTP Status (Hypixel API)",
-                                    value=str(http_statusv1),
-                                    inline=True,
-                                )
-                                await ctx.send(embed=discord_embed)
-                            else:
-                                embedVar = discord.Embed()
-                                embedVar.description = f"The query was not successful.\nDebug:\nSuccess (Player) >> {player['success']}\nCause (Player) >> {player['cause']}\nHTTP Status (Hypixel API) >> {http_statusv1}"
-                                await ctx.send(embed=embedVar)
-                        except Exception as e:
-                            embedVar = discord.Embed()
-                            embedVar.description = "The query was not successful."
-                            embedVar.add_field(
-                                name="Reason", value=e, inline=True)
-                            await ctx.send(embed=embedVar)
-
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
-
-    @hypixel.error
-    async def on_message_error(
-        self, ctx: commands.Context, error: commands.CommandError
-    ):
-        if isinstance(error, commands.MissingRequiredArgument):
-            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
-            embedVar.description = f"Missing a requireed argument: {error.param}"
-            msg = await ctx.send(embed=embedVar, delete_after=10)
-            await msg.delete(delay=10)
+                                    name=key, value=value, inline=True)
+                        await ctx.respond(embed=discord_embed)
+                    else:
+                        embedVar = discord.Embed()
+                        embedVar.description = "The query was not successful"
+                        embedVar.add_field(name="Success", value=player["success"], inline=True)
+                        embedVar.add_field(name="Cause", value=player['cause'], inline=True)
+                        embedVar.add_field(name="HTTP Response Status", value=r.status, inline=True)
+                        await ctx.respond(embed=embedVar)
+                except Exception as e:
+                    embedVar = discord.Embed()
+                    embedVar.description = "The query was not successful."
+                    embedVar.add_field(
+                        name="Reason", value=e, inline=True)
+                    await ctx.respond(embed=embedVar)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
@@ -110,7 +64,7 @@ class hypixel_player_count(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
 
-    @commands.command(name="hypixelcount")
+    @slash_command(name="hypixel-count", description="Returns the Amount of Players in each game server", guild_ids=[866199405090308116])
     async def player_count(self, ctx):
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
             params = {"key": hypixel_api_key}
@@ -118,95 +72,21 @@ class hypixel_player_count(commands.Cog):
                 "https://api.hypixel.net/counts", params=params
             ) as response:
                 status = await response.json()
-                http_status = response.status
                 try:
                     if str(status["success"]) == "True":
                         embedVar = discord.Embed(
                             title="Games Player Count",
                             color=discord.Color.from_rgb(186, 193, 255),
                         )
-                        embedVar.add_field(
-                            name="Main Lobby",
-                            value=status["games"]["MAIN_LOBBY"]["players"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Tournament Lobby",
-                            value=status["games"]["TOURNAMENT_LOBBY"]["players"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="SMP",
-                            value=status["games"]["SMP"]["players"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Housing",
-                            value=status["games"]["HOUSING"]["players"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Pit",
-                            value=status["games"]["PIT"]["players"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="TNTGames",
-                            value=status["games"]["TNTGAMES"]["players"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Replay",
-                            value=status["games"]["REPLAY"]["players"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Bedwars",
-                            value=status["games"]["BEDWARS"]["players"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Survival Games",
-                            value=status["games"]["SURVIVAL_GAMES"]["players"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Skyblock",
-                            value=status["games"]["SKYBLOCK"]["players"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="UHC",
-                            value=status["games"]["UHC"]["players"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Arcade",
-                            value=status["games"]["ARCADE"]["players"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Build Battle",
-                            value=status["games"]["BUILD_BATTLE"]["players"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Duels",
-                            value=status["games"]["DUELS"]["players"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="HTTP Status (Hypixel API)",
-                            value=str(http_status),
-                            inline=False,
-                        )
-                        await ctx.send(embed=embedVar)
+                        for k, v in status["games"].items():
+                            embedVar.add_field(name=k, value=v["players"], inline=True)
+                        await ctx.respond(embed=embedVar)
                 except Exception as e:
                     embedVar = discord.Embed()
                     embedVar.description = "The command broke. Please try again."
                     embedVar.add_field(
                         name="Reason", value=str(e), inline=False)
-                    await ctx.send(embed=embedVar)
+                    await ctx.respond(embed=embedVar)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
@@ -214,8 +94,7 @@ class hypixel_player_count(commands.Cog):
 class hypixel_status(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
-
-    @commands.command(name="hypixelplayerstatus")
+    @slash_command(name="hypixel-player-status", description="Returns the given player's online status", guild_ids=[866199405090308116])
     async def player_status(self, ctx, *, uuid: str):
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
             params = {"uuid": uuid, "key": hypixel_api_key}
@@ -223,121 +102,69 @@ class hypixel_status(commands.Cog):
                 "https://api.hypixel.net/status", params=params
             ) as rep:
                 player_statusv3 = await rep.json()
-                http_statusv1 = rep.status
                 try:
                     if str(player_statusv3["success"]) == "True":
+                        filterKeys = ["session"]
                         embedVar = discord.Embed(
                             title="Player Status",
                             color=discord.Color.from_rgb(222, 222, 222),
                         )
-                        embedVar.add_field(
-                            name="UUID", value=player_statusv3["uuid"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="Online",
-                            value=player_statusv3["session"]["online"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Success",
-                            value=player_statusv3["success"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="HTTP Status", value=http_statusv1, inline=True
-                        )
-                        await ctx.send(embed=embedVar)
+                        for keys, value in player_statusv3.items():
+                            if keys not in filterKeys:
+                                embedVar.add_field(
+                                    name=keys, value=value, inline=True)
+                        for k, v in player_statusv3["session"].items():
+                            embedVar.add_field(name=k, value=v, inline=True)
+                        await ctx.respond(embed=embedVar)
                     else:
                         embedVar = discord.Embed()
-                        embedVar.description = f"The query was not successful.\nDebug:\nSuccess >> {player_statusv3['success']}\nCause >> {player_statusv3['cause']}\nHTTP Status (Hypixel API)>> {http_statusv1}"
-                        await ctx.send(embed=embedVar)
+                        embedVar.description = "The query was not successful"
+                        embedVar.add_field(name="Success", value=player_statusv3["success"], inline=True)
+                        embedVar.add_field(name="Cause", value=player_statusv3["cause"], inline=True)
+                        embedVar.add_field(name="HTTP Reponse Status", value=rep.status, inline=True)
+                        await ctx.respond(embed=embedVar)
                 except Exception as e:
                     embedVar = discord.Embed()
                     embedVar.description = "The query was not successful."
                     embedVar.add_field(name="Reason", value=e, inline=True)
-                    await ctx.send(embed=embedVar)
-
-    @player_status.error
-    async def on_message_error(
-        self, ctx: commands.Context, error: commands.CommandError
-    ):
-        if isinstance(error, commands.MissingRequiredArgument):
-            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
-            embedVar.description = f"Missing a requireed argument: {error.param}"
-            msg = await ctx.send(embed=embedVar, delete_after=10)
-            await msg.delete(delay=10)
-
-
-class skywars(commands.Cog):
+                    await ctx.respond(embed=embedVar)
+    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
+    
+class networkPunishments(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
-
-    @commands.command(name="skywarsinfo")
-    async def skywars_info(self, ctx, *, uuid: str):
+        
+    @slash_command(name="hypixel-punishment-stats", description="Shows the stats for the amount of punishments given on Hypixel (All Users)", guild_ids=[866199405090308116])
+    async def punishment_stats(self, ctx):
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
-            params = {"uuid": uuid, "key": hypixel_api_key}
-            async with session.get(
-                "https://api.hypixel.net/player/ranked/skywars", params=params
-            ) as re:
-                skywars = await re.json()
-                http_statusv1 = re.status
+            params = {"key": hypixel_api_key}
+            async with session.get("https://api.hypixel.net/punishmentstats", params=params) as r:
+                stats = await r.json()
                 try:
-                    if str(skywars["success"]) == "True":
-                        embedVar = discord.Embed(
-                            title="Skywars Position",
-                            color=discord.Color.from_rgb(255, 143, 143),
-                        )
-                        embedVar.add_field(
-                            name="Position",
-                            value=skywars["results"]["position"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Score", value=skywars["results"]["score"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="Success or Not?",
-                            value=skywars["success"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="HTTP Status (Hypixel API)",
-                            value=http_statusv1,
-                            inline=True,
-                        )
-                        await ctx.send(embed=embedVar)
+                    embedVar = discord.Embed(title="Total Amounts of Punishments Given", color=discord.Color.from_rgb(186, 193, 255))
+                    if str(stats["success"]) == "True":
+                        filter = ["success"]
+                        for keys, value in stats.items():
+                            if keys not in filter:
+                                embedVar.add_field(name=keys, value=value, inline=True)
+                        await ctx.respond(embed=embedVar)
                     else:
-                        embedVar = discord.Embed()
-                        embedVar.description = "The given player either does not exist or has not played Ranked Skywars yet."
-                        embedVar.add_field(
-                            name="Success", value=skywars["success"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="Cause", value=skywars["cause"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="HTTP Status", value=http_statusv1, inline=True
-                        )
-                        await ctx.send(embed=embedVar)
+                        embedVar.description = "The results didn't come through..."
+                        embedVar.add_field(name="Success", value=stats["success"], inline=True)
+                        embedVar.add_field(name="Cause", value=stats["cause"], inline=True)
+                        embedVar.add_field(name="HTTP Reponse Status", value=r.status, inline=True)
+                        await ctx.respond(embed=embedVar)
                 except Exception as e:
-                    embedVar = discord.Embed()
-                    embedVar.description = "The query was not successful."
-                    embedVar.add_field(name="Reason", value=e, inline=True)
-                    await ctx.send(embed=embedVar)
-
-    @skywars_info.error
-    async def on_message_error(
-        self, ctx: commands.Context, error: commands.CommandError
-    ):
-        if isinstance(error, commands.MissingRequiredArgument):
-            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
-            embedVar.description = f"Missing a requireed argument: {error.param}"
-            msg = await ctx.send(embed=embedVar, delete_after=10)
-            await msg.delete(delay=10)
-
+                    embedException = discord.Embed()
+                    embedException.description = "The query failed..."
+                    embedException.add_field(name="Reason", value=e, inline=True)
+                    embedException.add_field(name="HTTP Reponse Status", value=r.status, inline=True)
+                    await ctx.respond(embed=embedException)
+                    
+    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
 def setup(bot):
     bot.add_cog(hypixel_api(bot))
     bot.add_cog(hypixel_status(bot))
     bot.add_cog(hypixel_player_count(bot))
-    bot.add_cog(skywars(bot))
+    bot.add_cog(networkPunishments(bot))
diff --git a/Bot/Cogs/rinhelp.py b/Bot/Cogs/rinhelp.py
index 1eff798..6acfcf6 100644
--- a/Bot/Cogs/rinhelp.py
+++ b/Bot/Cogs/rinhelp.py
@@ -24,15 +24,13 @@ class rinhelp(commands.Cog):
         category: Option(
             str,
             choices=[
-                "Admin",
                 "Twitter",
                 "Reddit",
                 "Minecraft",
+                "Hypixel",
                 "Fun",
                 "Misc",
                 "Instagram",
-                "Chat",
-                "Misc",
                 "DeviantArt",
                 "Anime",
                 "Top.gg",
@@ -52,8 +50,6 @@ class rinhelp(commands.Cog):
                 embedVar.description = """
                         **[GitHub](https://github.com/No767/Rin)** | **[Docs](https://docs.rinbot.live)** | **[Invite](https://top.gg/bot/865883525932253184/invite)** | **[Website](https://rinbot.live)**
                         """
-                embedVar.add_field(
-                    name="Admin", value="`/rinhelp admin`", inline=True)
                 embedVar.add_field(
                     name="Twitter", value="`/rinhelp twitter`", inline=True
                 )
@@ -62,12 +58,11 @@ class rinhelp(commands.Cog):
                 )
                 embedVar.add_field(
                     name="Minecraft", value="`/rinhelp mc`", inline=True)
+                embedVar.add_field(name="Hypixel", value="`/rinhelp hypixel`", inline=True)
                 embedVar.add_field(
                     name="Fun", value="`/rinhelp fun`", inline=True)
                 embedVar.add_field(
                     name="Instagram", value="`/rinhelp ig`", inline=True)
-                embedVar.add_field(
-                    name="Chat", value="`/rinhelp chat`", inline=True)
                 embedVar.add_field(
                     name="Misc", value="`/rinhelp misc`", inline=True)
                 embedVar.add_field(
@@ -101,32 +96,6 @@ class rinhelp(commands.Cog):
                 )
                 await ctx.respond(embed=embedVar)
 
-            if category in ["admin", "Admin"]:
-                bot = self.bot
-                embedVar = discord.Embed(color=14414079)
-                embedVar.add_field(
-                    name="`botgrowth`",
-                    value="Tips based on bot statistics on how to reach more people!",
-                    inline=True,
-                )
-                embedVar.add_field(
-                    name="`prune`",
-                    value="Removes bot from servers smaller than the specified limit\n",
-                    inline=True,
-                )
-                embedVar.add_field(
-                    name="`botinfo`", value="Statistics about this bot", inline=True
-                )
-                embedVar.add_field(
-                    name="`serverinfo`", value="Known server information", inline=True
-                )
-                embedVar.add_field(
-                    name="`ping`", value="Checks the ping for the bot", inline=True
-                )
-                embedVar.set_author(
-                    name="Rin Help - Admin", icon_url=bot.user.display_avatar
-                )
-                await ctx.respond(embed=embedVar)
 
             if category in ["twitter", "Twitter"]:
                 bot = self.bot
@@ -185,52 +154,51 @@ class rinhelp(commands.Cog):
                     name="`bedrock`", value="Alias for `bedrockmcsrv", inline=True
                 )
                 embedVar.add_field(
-                    name="`hypixel`",
-                    value="Gain Insight in Hypixel's player data",
+                    name="`spiget-search`",
+                    value="Searches for Minecraft plugins via Spiget and returns information on such plugin",
                     inline=True,
                 )
                 embedVar.add_field(
-                    name="`hypixelcount`",
-                    value="Obtain the amount of players online within the servers",
+                    name="`spiget-stats`",
+                    value="Returns stats for Spiget (total resources created, etc)",
                     inline=True,
                 )
                 embedVar.add_field(
-                    name="`hypixelplayerstatus`",
-                    value="Determine if the player requests is online or " "not",
+                    name="`spiget-status`",
+                    value="Returns HTTP Status of the Spiget API",
                     inline=True,
                 )
-                embedVar.add_field(
-                    name="`skywarsinfo`",
-                    value="Get the position and score of the player within "
-                    "**ranked** skywars",
-                    inline=True,
+                embedVar.set_author(
+                    name="Rin Help - Minecraft", icon_url=bot.user.display_avatar
                 )
+                await ctx.respond(embed=embedVar)
+            if category in ["Hypixel", "hypixel"]:
+                bot = self.bot
+                embedVar = discord.Embed(color=14414079)
                 embedVar.add_field(
-                    name="`spiget-search`",
-                    value="Searches for Minecraft plugins via Spiget and returns information on such plugin",
+                    name="`hypixel-user`",
+                    value="Gain Insight in Hypixel's player data",
                     inline=True,
                 )
                 embedVar.add_field(
-                    name="`spiget-stats`",
-                    value="Returns stats for Spiget (total resources created, etc)",
+                    name="`hypixel-count`",
+                    value="Obtain the amount of players online within the servers",
                     inline=True,
                 )
                 embedVar.add_field(
-                    name="`spiget-status`",
-                    value="Returns HTTP Status of the Spiget API",
+                    name="`hypixel-player-status`",
+                    value="Determine if the player is online or not",
                     inline=True,
                 )
+                embedVar.add_field(name="`hypixel-punishments-stats`", value="Returns some stats about the amount of punishments given on Hypixel", inline=True)
                 embedVar.set_author(
-                    name="Rin Help - Minecraft", icon_url=bot.user.display_avatar
+                    name="Rin Help - Hypixel", icon_url=bot.user.display_avatar
                 )
                 await ctx.respond(embed=embedVar)
 
             if category in ["fun", "Fun"]:
                 bot = self.bot
                 embedVar = discord.Embed(color=14414079)
-                embedVar.add_field(
-                    name="`valid`", value="Provides some valid feedback", inline=True
-                )
                 embedVar.add_field(
                     name="`mylvl`", value="Displays DisQuest Level", inline=True
                 )
@@ -249,11 +217,6 @@ class rinhelp(commands.Cog):
                     value="Returns some advice from Advice Slip",
                     inline=True,
                 )
-                embedVar.add_field(
-                    name="`nb-pride`",
-                    value="Sends a non-binary flag and a trans flag into the channel",
-                    inline=True,
-                )
                 embedVar.set_author(
                     name="Rin Help - Fun", icon_url=bot.user.display_avatar
                 )
@@ -288,23 +251,6 @@ class rinhelp(commands.Cog):
                 )
                 await ctx.respond(embed=embedVar)
 
-            if category in ["chat", "Chat"]:
-                bot = self.bot
-                embedVar = discord.Embed(color=14414079)
-                embedVar.add_field(
-                    name="`chathelp`",
-                    value="The chat is automatically generated based on prewritten responses. Responses that are not documented will be ignored",
-                    inline=True,
-                )
-                embedVar.add_field(
-                    name="`clear`",
-                    value="Clears number of messages specified from the channel in which in the command was called",
-                )
-                embedVar.set_author(
-                    name="Rin Help - Chat", icon_url=bot.user.display_avatar
-                )
-                await ctx.respond(embed=embedVar)
-
             if category in ["misc", "Misc"]:
                 bot = self.bot
                 embedVar = discord.Embed(color=14414079)
@@ -321,11 +267,6 @@ class rinhelp(commands.Cog):
                 embedVar.add_field(
                     name="`rinhelp`", value="Rin's Help command", inline=True
                 )
-                embedVar.add_field(
-                    name="`help`",
-                    value="Alias for `rinhelp`. Replaces the default help command",
-                    inline=True,
-                )
                 embedVar.add_field(
                     name="`rininvite`",
                     value="Rin's invite links. Also can be reached with `.invite`.",
@@ -339,6 +280,12 @@ class rinhelp(commands.Cog):
                 embedVar.add_field(
                     name="`uptime`", value="Checks for Rin's Uptime", inline=True
                 )
+                embedVar.add_field(
+                    name="`botinfo`", value="Statistics about this bot", inline=True
+                )
+                embedVar.add_field(
+                    name="`ping`", value="Checks the ping for the bot", inline=True
+                )
                 embedVar.set_author(
                     name="Rin Help - Misc", icon_url=bot.user.display_avatar
                 )
diff --git a/Bot/Cogs/tenor.py b/Bot/Cogs/tenor.py
index a1ddff2..d6dfcdc 100644
--- a/Bot/Cogs/tenor.py
+++ b/Bot/Cogs/tenor.py
@@ -180,7 +180,6 @@ class TenorV4(commands.Cog):
         description="Gives a list of suggested search terms based on given topic",
         guild_ids=[866199405090308116],
     )
-    @commands.command(name="tenor-search-suggestions", aliases=["tss"])
     async def tenor_search_suggestions(
         self,
         ctx,
-- 
2.35.1

