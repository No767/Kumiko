From 159a3362300186cbd02c3f6ec404fd90c3a814dd Mon Sep 17 00:00:00 2001
From: No767 <73260931+No767@users.noreply.github.com>
Date: Sun, 13 Feb 2022 00:50:58 -0800
Subject: [PATCH] Switch from Legacy Commands to Slash Commands

There's a lot that has to be done...
---
 Bot/Cogs/disquest.py        |  20 +++---
 Bot/Cogs/jikan.py           |  17 +----
 Bot/Cogs/rinhelp.py         |  36 +++++------
 Bot/Cogs/rininfo.py         |  86 ++++++++++++------------
 Bot/Cogs/tenor.py           | 126 +++++++++---------------------------
 Bot/Cogs/top-gg.py          |  44 ++++---------
 Bot/Cogs/waifu-generator.py |  96 ++++++++++++++-------------
 7 files changed, 166 insertions(+), 259 deletions(-)

diff --git a/Bot/Cogs/disquest.py b/Bot/Cogs/disquest.py
index 4e77e13..a983654 100644
--- a/Bot/Cogs/disquest.py
+++ b/Bot/Cogs/disquest.py
@@ -6,11 +6,13 @@ import random
 import discord
 import uvloop
 from discord.ext import commands
+from discord.commands import slash_command
 from dotenv import load_dotenv
 from sqlalchemy import (BigInteger, Column, Integer, MetaData, Sequence, Table,
                         func, select)
 from sqlalchemy.ext.asyncio import create_async_engine
 
+
 load_dotenv()
 
 Password = os.getenv("Postgres_Password")
@@ -103,10 +105,7 @@ class DisQuest(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
 
-    @commands.command(
-        name="mylvl",
-        help="Displays your activity level!",
-    )
+    @slash_command(name="mylvl", description="Displays your activity level!", guild_ids=[866199405090308116])
     async def mylvl(self, ctx):
         user = disaccount(ctx)
         xp = await user.getxp()
@@ -116,7 +115,7 @@ class DisQuest(commands.Cog):
         embedVar.add_field(name="LVL", value=f"{lvl.cur(xp)}", inline=True)
         embedVar.add_field(
             name="XP", value=f"{xp}/{lvl.next(xp)*100}", inline=True)
-        await ctx.send(embed=embedVar)
+        await ctx.respond(embed=embedVar)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
@@ -128,6 +127,7 @@ class DisQuestV2(commands.Cog):
     @commands.command(
         name="rank", help="Displays the most active members of your server!"
     )
+    @slash_command(name="rank", description="Displays the most active members of your server!", guild_ids=[866199405090308116])
     async def rank(self, ctx):
         gid = ctx.guild.id
         meta = MetaData()
@@ -163,7 +163,7 @@ class DisQuestV2(commands.Cog):
             embedVar = discord.Embed(
                 color=discord.Color.from_rgb(254, 255, 217))
             embedVar.description = f"**Server Rankings**\n{''.join(members)}"
-            await ctx.send(embed=embedVar)
+            await ctx.respond(embed=embedVar)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
@@ -172,11 +172,7 @@ class DisQuestV3(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
 
-    @commands.command(
-        name="globalrank",
-        help="Displays the most active members of all servers that this bot is connected to!",
-        aliases=["grank"],
-    )
+    @slash_command(name="globalrank", description="Displays the most active members of all servers that this bot is connected to!", guild_ids=[866199405090308116])
     async def grank(self, ctx):
         meta = MetaData()
         engine = create_async_engine(
@@ -215,7 +211,7 @@ class DisQuestV3(commands.Cog):
             embedVar = discord.Embed(
                 color=discord.Color.from_rgb(217, 255, 251))
             embedVar.description = f"**Global Rankings**\n{''.join(members)}"
-            await ctx.send(embed=embedVar)
+            await ctx.respond(embed=embedVar)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
diff --git a/Bot/Cogs/jikan.py b/Bot/Cogs/jikan.py
index 3412c77..83439b5 100644
--- a/Bot/Cogs/jikan.py
+++ b/Bot/Cogs/jikan.py
@@ -59,26 +59,13 @@ class JikanV1(commands.Cog):
                                     value=str(val).replace("'", ""),
                                     inline=True,
                                 )
+                        for dictItem in anime_info_v2["external_links"]:
+                            embedVar.add_field(name=dictItem["name"], value=dictItem["url"], inline=True)
                         embedVar.add_field(
                             name="Aired",
                             value=anime_info_v2["aired"]["string"],
                             inline=True,
                         )
-                        embedVar.add_field(
-                            name="Official Site",
-                            value=anime_info_v2["external_links"][0]["url"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="AnimeDB",
-                            value=anime_info_v2["external_links"][1]["url"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="AnimeNewsNetwork",
-                            value=anime_info_v2["external_links"][2]["url"],
-                            inline=True,
-                        )
                         embedVar2.description = f"{str(anime_info_v2['synopsis']).replace('[Written by MAL Rewrite]', '')}"
                         embedVar2.add_field(
                             name="Background",
diff --git a/Bot/Cogs/rinhelp.py b/Bot/Cogs/rinhelp.py
index 17af8fb..1eff798 100644
--- a/Bot/Cogs/rinhelp.py
+++ b/Bot/Cogs/rinhelp.py
@@ -21,7 +21,7 @@ class rinhelp(commands.Cog):
         self,
         ctx,
         *,
-        search: Option(
+        category: Option(
             str,
             choices=[
                 "Admin",
@@ -46,7 +46,7 @@ class rinhelp(commands.Cog):
         )
     ):
         try:
-            if search is None:
+            if category is None:
                 bot = self.bot
                 embedVar = discord.Embed(color=14414079)
                 embedVar.description = """
@@ -101,7 +101,7 @@ class rinhelp(commands.Cog):
                 )
                 await ctx.respond(embed=embedVar)
 
-            if search in ["admin", "Admin"]:
+            if category in ["admin", "Admin"]:
                 bot = self.bot
                 embedVar = discord.Embed(color=14414079)
                 embedVar.add_field(
@@ -128,7 +128,7 @@ class rinhelp(commands.Cog):
                 )
                 await ctx.respond(embed=embedVar)
 
-            if str(search) in ["twitter", "Twitter"]:
+            if category in ["twitter", "Twitter"]:
                 bot = self.bot
                 embedVar = discord.Embed(color=14414079)
                 embedVar.add_field(
@@ -146,7 +146,7 @@ class rinhelp(commands.Cog):
                 )
                 await ctx.respond(embed=embedVar)
 
-            if str(search) in ["reddit", "Reddit"]:
+            if category in ["reddit", "Reddit"]:
                 bot = self.bot
                 embedVar = discord.Embed(color=14414079)
                 embedVar.add_field(
@@ -167,7 +167,7 @@ class rinhelp(commands.Cog):
                 )
                 await ctx.respond(embed=embedVar)
 
-            if str(search) in ["minecraft", "mc", "Minecraft"]:
+            if category in ["minecraft", "mc", "Minecraft"]:
                 bot = self.bot
                 embedVar = discord.Embed(color=14414079)
                 embedVar.add_field(
@@ -225,7 +225,7 @@ class rinhelp(commands.Cog):
                 )
                 await ctx.respond(embed=embedVar)
 
-            if str(search) in ["fun", "Fun"]:
+            if category in ["fun", "Fun"]:
                 bot = self.bot
                 embedVar = discord.Embed(color=14414079)
                 embedVar.add_field(
@@ -259,7 +259,7 @@ class rinhelp(commands.Cog):
                 )
                 await ctx.respond(embed=embedVar)
 
-            if str(search) in ["instagram", "ig", "Instgram"]:
+            if category in ["instagram", "ig", "Instgram"]:
                 bot = self.bot
                 embedVar = discord.Embed(color=14414079)
                 embedVar.add_field(
@@ -288,7 +288,7 @@ class rinhelp(commands.Cog):
                 )
                 await ctx.respond(embed=embedVar)
 
-            if str(search) in ["chat", "Chat"]:
+            if category in ["chat", "Chat"]:
                 bot = self.bot
                 embedVar = discord.Embed(color=14414079)
                 embedVar.add_field(
@@ -305,7 +305,7 @@ class rinhelp(commands.Cog):
                 )
                 await ctx.respond(embed=embedVar)
 
-            if str(search) in ["misc", "Misc"]:
+            if category in ["misc", "Misc"]:
                 bot = self.bot
                 embedVar = discord.Embed(color=14414079)
                 embedVar.add_field(
@@ -344,7 +344,7 @@ class rinhelp(commands.Cog):
                 )
                 await ctx.respond(embed=embedVar)
 
-            if str(search) in ["deviantart", "da", "DevintArt"]:
+            if category in ["deviantart", "da", "DevintArt"]:
                 bot = self.bot
                 embedVar = discord.Embed(color=14414079)
                 embedVar.add_field(
@@ -380,7 +380,7 @@ class rinhelp(commands.Cog):
                 )
                 await ctx.respond(embed=embedVar)
 
-            if str(search) in ["anime", "Anime"]:
+            if category in ["anime", "Anime"]:
                 bot = self.bot
                 embedVar = discord.Embed(color=14414079)
                 embedVar.add_field(
@@ -398,7 +398,7 @@ class rinhelp(commands.Cog):
                 )
                 await ctx.respond(embed=embedVar)
 
-            if str(search) in [
+            if category in [
                 "jikan",
                 "jk",
                 "myanimelist",
@@ -441,7 +441,7 @@ class rinhelp(commands.Cog):
                 )
                 await ctx.respond(embed=embedVar)
 
-            if str(search) in ["topgg", "Top.gg"]:
+            if category in ["topgg", "Top.gg"]:
                 bot = self.bot
                 embedVar = discord.Embed(color=14414079)
                 embedVar.add_field(
@@ -459,7 +459,7 @@ class rinhelp(commands.Cog):
                 )
                 await ctx.respond(embed=embedVar)
 
-            if str(search) in ["pinterest", "pt", "Pinterest"]:
+            if category in ["pinterest", "pt", "Pinterest"]:
                 bot = self.bot
                 embedVar = discord.Embed(color=14414079)
                 embedVar.add_field(
@@ -483,7 +483,7 @@ class rinhelp(commands.Cog):
                 )
                 await ctx.respond(embed=embedVar)
 
-            if str(search) in ["youtube", "yt", "YouTube"]:
+            if category in ["youtube", "yt", "YouTube"]:
                 bot = self.bot
                 embedVar = discord.Embed(color=14414079)
                 embedVar.add_field(
@@ -519,7 +519,7 @@ class rinhelp(commands.Cog):
                 )
                 await ctx.respond(embed=embedVar)
 
-            if str(search) in ["tenor", "Tenor"]:
+            if category in ["tenor", "Tenor"]:
                 bot = self.bot
                 embedVar = discord.Embed(color=14414079)
                 embedVar.add_field(
@@ -560,7 +560,7 @@ class rinhelp(commands.Cog):
                 )
                 await ctx.respond(embed=embedVar)
 
-            if str(search) in ["openai", "ai", "gpt-3", "OpenAI"]:
+            if category in ["openai", "ai", "gpt-3", "OpenAI"]:
                 bot = self.bot
                 embedVar = discord.Embed(color=14414079)
                 embedVar.add_field(
diff --git a/Bot/Cogs/rininfo.py b/Bot/Cogs/rininfo.py
index 75643e7..a5af7ef 100644
--- a/Bot/Cogs/rininfo.py
+++ b/Bot/Cogs/rininfo.py
@@ -1,43 +1,43 @@
-import asyncio
-
-import discord
-import uvloop
-from discord.commands import slash_command
-from discord.ext import commands
-
-
-class info(commands.Cog):
-    def __init__(self, bot):
-        self.bot = bot
-
-    @slash_command(
-        name="rininfo", description="Info about Rin", guild_ids=[866199405090308116]
-    )
-    async def rinInfo(self, ctx):
-        bot = self.bot
-        embedVar = discord.Embed(color=14414079)
-        embedVar.set_author(name="Rin Info", icon_url=bot.user.display_avatar)
-        embedVar.add_field(
-            name="About",
-            value="Rin is a Discord bot focused on providing data from third party services such as DeviantArt, Hypixel, Reddit, MyAnimeList/Jikan, and many others. Rin allows you to find memes on Reddit with the Reddit service, or get info about your favorite anime with the MAL service. If you want a multipurpose version of Rin, check out Kumiko.",
-            inline=False,
-        )
-        embedVar.add_field(
-            name="Getting Started",
-            value="To help you get started, type in `.rinhelp` or `.help` in order to access the help page. This will provide you with all of the commands that is available to use as of now.",
-            inline=False,
-        )
-        embedVar.add_field(
-            name="Questions or Issues?",
-            value="If you have any questions, or any issues, or just an idea that you would like to add, please report them on the [GitHub Issue Tracker](https://github.com/No767/Rin/issues). Note that Rin does not any type of support discord server nor do I plan to make one to begin with.",
-        )
-        embedVar.set_footer(
-            text="Project Lead Maintainer and Original Creator of Rin: No767\nOriginal Creator of EasyBot.py and EasyBot Plugins: Isaac-To\n\nFun fact: use /version to check the current version of Rin"
-        )
-        await ctx.respond(embed=embedVar)
-
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
-
-
-def setup(bot):
-    bot.add_cog(info(bot))
+import asyncio
+
+import discord
+import uvloop
+from discord.commands import slash_command
+from discord.ext import commands
+
+
+class info(commands.Cog):
+    def __init__(self, bot):
+        self.bot = bot
+
+    @slash_command(
+        name="rininfo", description="Info about Rin", guild_ids=[866199405090308116]
+    )
+    async def rinInfo(self, ctx):
+        bot = self.bot
+        embedVar = discord.Embed(color=14414079)
+        embedVar.set_author(name="Rin Info", icon_url=bot.user.display_avatar)
+        embedVar.add_field(
+            name="About",
+            value="Rin is a Discord bot focused on providing data from third party services such as DeviantArt, Hypixel, Reddit, MyAnimeList/Jikan, and many others. Rin allows you to find memes on Reddit with the Reddit service, or get info about your favorite anime with the MAL service. If you want a multipurpose version of Rin, check out Kumiko.",
+            inline=False,
+        )
+        embedVar.add_field(
+            name="Getting Started",
+            value="To help you get started, type in `/rinhelp` in order to access the help page. This will provide you with all of the commands that is available to use as of now.",
+            inline=False,
+        )
+        embedVar.add_field(
+            name="Questions or Issues?",
+            value="If you have any questions, or any issues, or just an idea that you would like to add, please report them on the [GitHub Issue Tracker](https://github.com/No767/Rin/issues). Note that Rin does not any type of support discord server nor do I plan to make one to begin with.",
+        )
+        embedVar.set_footer(
+            text="Project Lead Maintainer and Original Creator of Rin: No767\nOriginal Creator of EasyBot.py and EasyBot Plugins: Isaac-To\n\nFun fact: use /version to check the current version of Rin"
+        )
+        await ctx.respond(embed=embedVar)
+
+    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
+
+
+def setup(bot):
+    bot.add_cog(info(bot))
diff --git a/Bot/Cogs/tenor.py b/Bot/Cogs/tenor.py
index 4ca9ba5..c5e9fc6 100644
--- a/Bot/Cogs/tenor.py
+++ b/Bot/Cogs/tenor.py
@@ -6,6 +6,7 @@ import discord
 import orjson
 import uvloop
 from discord.ext import commands
+from discord.commands import slash_command, Option
 from dotenv import load_dotenv
 
 load_dotenv()
@@ -17,11 +18,11 @@ class TenorV1(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
 
-    @commands.command(name="tenor-search-multiple", aliases=["tsm"])
-    async def tenor_search(self, ctx, *, search: str):
+    @slash_command(name="tenor-search-multiple", description="Searches for up to 5 gifs on Tenor", guild_ids=[866199405090308116])
+    async def tenor_search(self, ctx, *, search_term: Option(str, "Search Term for GIFs")):
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
             params = {
-                "q": search,
+                "q": search_term,
                 "key": Tenor_API_Key,
                 "contentfilter": "medium",
                 "limit": 5,
@@ -55,37 +56,27 @@ class TenorV1(commands.Cog):
                                 embedVar.title = dictItem["content_description"]
                         for item in dictItem.get("media"):
                             embedVar.set_image(url=item["gif"]["url"])
-                        await ctx.send(embed=embedVar)
+                        await ctx.respond(embed=embedVar)
                 except Exception as e:
                     embedVar = discord.Embed()
-                    embedVar.description = f"Sorry, but the search for {search} has failed. Please try again..."
+                    embedVar.description = f"Sorry, but the search for {search_term} has failed. Please try again..."
                     embedVar.add_field(name="Reason", value=e, inline=True)
-                    await ctx.send(embed=embedVar)
+                    await ctx.respond(embed=embedVar)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
-    @tenor_search.error
-    async def on_message_error(
-        self, ctx: commands.Context, error: commands.CommandError
-    ):
-        if isinstance(error, commands.MissingRequiredArgument):
-            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
-            embedVar.description = f"Missing a required argument: {error.param}"
-            msg = await ctx.send(embed=embedVar, delete_after=10)
-            await msg.delete(delay=10)
 
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
 
 class TenorV2(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
 
-    @commands.command(name="tenor-search-one", aliases=["tso"])
-    async def tenor_search_one(self, ctx, *, search_one: str):
+    @slash_command(name="tenor-search-one", description="Searches for a single gif on Tenor", guild_ids=[866199405090308116])
+    async def tenor_search_one(self, ctx, *, search_one_term: Option(str, "Search Term for GIF")):
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
             params = {
-                "q": search_one,
+                "q": search_one_term,
                 "key": Tenor_API_Key,
                 "contentfilter": "medium",
                 "limit": 1,
@@ -104,30 +95,18 @@ class TenorV2(commands.Cog):
                     await ctx.send(embed=embedVar1)
                 except Exception as e:
                     embedVar = discord.Embed()
-                    embedVar.description = "Sorry, but the search for {search} has failed. Please try again..."
+                    embedVar.description = f"Sorry, but the search for {search_one_term} has failed. Please try again..."
                     embedVar.add_field(name="Reason", value=e, inline=True)
                     await ctx.send(embed=embedVar)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
-    @tenor_search_one.error
-    async def on_message_error(
-        self, ctx: commands.Context, error: commands.CommandError
-    ):
-        if isinstance(error, commands.MissingRequiredArgument):
-            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
-            embedVar.description = f"Missing a required argument: {error.param}"
-            msg = await ctx.send(embed=embedVar, delete_after=10)
-            await msg.delete(delay=10)
-
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
-
 
 class TenorV3(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
 
-    @commands.command(name="tenor-trending", aliases=["tt"])
+    @slash_command(name="tenor-trending", description="Returns up to 5 trending gifs from Tenor", guild_ids=[866199405090308116])
     async def tenor_trending(self, ctx):
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
             params = {
@@ -166,12 +145,12 @@ class TenorV3(commands.Cog):
                                 embedVar.title = dictItem2["content_description"]
                         for item2 in dictItem2.get("media"):
                             embedVar.set_image(url=item2["gif"]["url"])
-                        await ctx.send(embed=embedVar)
+                        await ctx.respond(embed=embedVar)
                 except Exception as e:
                     embedVar = discord.Embed()
-                    embedVar.description = "Sorry, but the search for {search} has failed. Please try again..."
+                    embedVar.description = "Sorry, but the query has failed. Please try again..."
                     embedVar.add_field(name="Reason", value=e, inline=True)
-                    await ctx.send(embed=embedVar)
+                    await ctx.respond(embed=embedVar)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
@@ -180,8 +159,9 @@ class TenorV4(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
 
+    @slash_command(name="tenor-search-suggestions", description="Gives a list of suggested search terms based on given topic", guild_ids=[866199405090308116])
     @commands.command(name="tenor-search-suggestions", aliases=["tss"])
-    async def tenor_search_suggestions(self, ctx, *, search_suggestion: str):
+    async def tenor_search_suggestions(self, ctx, *, search_suggestion: Option(str, "Topic/Search Term for Search Suggestion")):
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
             params = {"key": Tenor_API_Key,
                       "q": search_suggestion, "limit": 25}
@@ -204,24 +184,14 @@ class TenorV4(commands.Cog):
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
-    @tenor_search_suggestions.error
-    async def on_message_error(
-        self, ctx: commands.Context, error: commands.CommandError
-    ):
-        if isinstance(error, commands.MissingRequiredArgument):
-            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
-            embedVar.description = f"Missing a required argument: {error.param}"
-            msg = await ctx.send(embed=embedVar, delete_after=10)
-            await msg.delete(delay=10)
-
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
-
 
 class TenorV5(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
 
-    @commands.command(name="tenor-trending-terms", aliases=["tt-terms"])
+    @slash_command(name="tenor-trending-terms",
+                   description="Gives a list of trending search terms on Tenor",
+                   guild_ids=[866199405090308116])
     async def tenor_trending_terms(self, ctx):
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
             params = {"key": Tenor_API_Key, "limit": 25}
@@ -235,34 +205,23 @@ class TenorV5(commands.Cog):
                     embedVar.description = str(
                         [items for items in data6["results"]]
                     ).replace("'", "")
-                    await ctx.send(embed=embedVar)
+                    await ctx.respond(embed=embedVar)
                 except Exception as e:
                     embedVar = discord.Embed()
                     embedVar.description = "Sorry, but the search for {search} has failed. Please try again..."
                     embedVar.add_field(name="Reason", value=e, inline=True)
-                    await ctx.send(embed=embedVar)
+                    await ctx.respond(embed=embedVar)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
-    @tenor_trending_terms.error
-    async def on_message_error(
-        self, ctx: commands.Context, error: commands.CommandError
-    ):
-        if isinstance(error, commands.MissingRequiredArgument):
-            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
-            embedVar.description = f"Missing a required argument: {error.param}"
-            msg = await ctx.send(embed=embedVar, delete_after=10)
-            await msg.delete(delay=10)
-
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
 
 class TenorV6(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
 
-    @commands.command(name="tenor-gif", aliases=["tg"])
-    async def tenor_gif(self, ctx, *, search_gif: int):
+    @slash_command(name="tenor-gif", description="Gives a gif based on the given GIF ID", guild_ids=[866199405090308116])
+    async def tenor_gif(self, ctx, *, search_gif: Option(int, "Tenor GIF ID")):
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
             params = {
                 "key": Tenor_API_Key,
@@ -302,43 +261,32 @@ class TenorV6(commands.Cog):
                                 )
                         for item3 in dictValues.get("media"):
                             embedVar.set_image(url=item3["gif"]["url"])
-                        await ctx.send(embed=embedVar)
+                        await ctx.respond(embed=embedVar)
                 except Exception as e:
                     embedVar = discord.Embed()
                     embedVar.description = (
                         "Sorry, but the query failed. Please try again..."
                     )
                     embedVar.add_field(name="Reason", value=e, inline=True)
-                    await ctx.send(embed=embedVar)
+                    await ctx.respond(embed=embedVar)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
-    @tenor_gif.error
-    async def on_message_error(
-        self, ctx: commands.Context, error: commands.CommandError
-    ):
-        if isinstance(error, commands.MissingRequiredArgument):
-            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
-            embedVar.description = f"Missing a required argument: {error.param}"
-            msg = await ctx.send(embed=embedVar, delete_after=10)
-            await msg.delete(delay=10)
-
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
 
 class TenorV7(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
 
-    @commands.command(name="tenor-random", aliases=["tr"])
-    async def tenor_random(self, ctx, *, search_random: str):
+    @slash_command(name="tenor-random", description="Gives a random gif from Tenor based on given search term", guild_ids=[866199405090308116])
+    async def tenor_random(self, ctx, *, search_random_term: Option(str, "Search Term")):
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
             params = {
                 "key": Tenor_API_Key,
                 "limit": 5,
                 "media_filter": "minimal",
                 "contentfilter": "medium",
-                "q": search_random,
+                "q": search_random_term,
             }
             async with session.get(
                 "https://g.tenor.com/v1/random", params=params
@@ -351,26 +299,14 @@ class TenorV7(commands.Cog):
                             embedVar.title = dict_items["content_description"]
                         for item3 in dict_items.get("media"):
                             embedVar.set_image(url=item3["gif"]["url"])
-                        await ctx.send(embed=embedVar)
+                        await ctx.respond(embed=embedVar)
                 except Exception as e:
                     embedVar = discord.Embed()
                     embedVar.description = (
                         "Sorry, but the query failed. Please try again..."
                     )
                     embedVar.add_field(name="Reason", value=e, inline=True)
-                    await ctx.send(embed=embedVar)
-
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
-
-    @tenor_random.error
-    async def on_message_error(
-        self, ctx: commands.Context, error: commands.CommandError
-    ):
-        if isinstance(error, commands.MissingRequiredArgument):
-            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
-            embedVar.description = f"Missing a required argument: {error.param}"
-            msg = await ctx.send(embed=embedVar, delete_after=10)
-            await msg.delete(delay=10)
+                    await ctx.respond(embed=embedVar)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
diff --git a/Bot/Cogs/top-gg.py b/Bot/Cogs/top-gg.py
index a82db47..489b538 100644
--- a/Bot/Cogs/top-gg.py
+++ b/Bot/Cogs/top-gg.py
@@ -6,6 +6,7 @@ import discord
 import orjson
 import uvloop
 from discord.ext import commands
+from discord.commands import slash_command, Option
 from dotenv import load_dotenv
 
 load_dotenv()
@@ -17,12 +18,12 @@ class TopGGV1(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
 
-    @commands.command(name="topgg-search")
-    async def topgg_search_one(self, ctx, *, search: int):
+    @slash_command(name="topgg-search", description="Returns Info about the given Discord bot on Top.gg", guild_ids=[866199405090308116])
+    async def topgg_search_one(self, ctx, bot_id: Option(str, "Discord Bot ID")):
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
             headers = {"Authorization": apiKey}
             async with session.get(
-                f"https://top.gg/api/bots/{search}", headers=headers
+                f"https://top.gg/api/bots/{bot_id}", headers=headers
             ) as r:
                 getOneBotInfo = await r.json()
                 try:
@@ -43,24 +44,14 @@ class TopGGV1(commands.Cog):
                             embedVar.add_field(
                                 name=key, value=str(val).replace("'", ""), inline=True
                             )
-                    await ctx.send(embed=embedVar)
+                    await ctx.respond(embed=embedVar)
                 except Exception as e:
                     embedVar = discord.Embed(
                         color=discord.Color.from_rgb(231, 74, 255))
                     embedVar.description = (
                         f"The query failed. Please try again.\nReason: {e}"
                     )
-                    await ctx.send(embed=embedVar)
-
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
-
-    @topgg_search_one.error
-    async def on_message(self, ctx: commands.Context, error: commands.CommandError):
-        if isinstance(error, commands.MissingRequiredArgument):
-            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
-            embedVar.description = f"Missing a required argument: {error.param}"
-            msg = await ctx.send(embed=embedVar, delete_after=10)
-            await msg.delete(delay=10)
+                    await ctx.respond(embed=embedVar)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
@@ -69,12 +60,13 @@ class TopGGV2(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
 
-    @commands.command(name="topgg-search-users")
-    async def topgg_search_users(self, ctx, *, search: int):
+    @slash_command(name="topgg-search-users", description="Returns Info about the given user on Top.gg",
+                   guild_ids=[866199405090308116])
+    async def topgg_search_users(self, ctx, *, user_id: Option(str, "User ID")):
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
             headers = {"Authorization": apiKey}
             async with session.get(
-                f"https://top.gg/api/users/{search}", headers=headers
+                f"https://top.gg/api/users/{user_id}", headers=headers
             ) as response:
                 user = await response.json()
                 try:
@@ -88,7 +80,7 @@ class TopGGV2(commands.Cog):
                         )
                         embed.add_field(
                             name="Reason", value=user["error"], inline=True)
-                        await ctx.send(embed=embed)
+                        await ctx.respond(embed=embed)
                     else:
                         embedVar = discord.Embed(
                             title=user["username"],
@@ -101,24 +93,14 @@ class TopGGV2(commands.Cog):
                                 embedVar.add_field(
                                     name=key, value=val, inline=True)
 
-                        await ctx.send(embed=embedVar)
+                        await ctx.respond(embed=embedVar)
                 except Exception as e:
                     embedVar = discord.Embed(
                         color=discord.Color.from_rgb(231, 74, 255))
                     embedVar.description = (
                         f"The query failed. Please try again.\nReason: {e}"
                     )
-                    await ctx.send(embed=embedVar)
-
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
-
-    @topgg_search_users.error
-    async def on_message(self, ctx: commands.Context, error: commands.CommandError):
-        if isinstance(error, commands.MissingRequiredArgument):
-            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
-            embedVar.description = f"Missing a required argument: {error.param}"
-            msg = await ctx.send(embed=embedVar, delete_after=10)
-            await msg.delete(delay=10)
+                    await ctx.respond(embed=embedVar)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
diff --git a/Bot/Cogs/waifu-generator.py b/Bot/Cogs/waifu-generator.py
index 267a5ef..28b8b16 100644
--- a/Bot/Cogs/waifu-generator.py
+++ b/Bot/Cogs/waifu-generator.py
@@ -1,45 +1,51 @@
-import asyncio
-
-import aiohttp
-import bs4
-import discord
-import orjson
-import uvloop
-from discord.ext import commands
-
-
-class waifu(commands.Cog):
-    def __init__(self, bot):
-        self.bot = bot
-
-    @commands.command(name="waifu")
-    async def on_message(self, ctx):
-        async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
-            headers = {
-                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36"
-            }
-            async with session.get(
-                "https://www.mywaifulist.moe/random", headers=headers
-            ) as r:
-                data = await r.text()
-                soup = bs4.BeautifulSoup(data, "lxml")
-                waifu_title = soup.find("meta", attrs={"property": "og:title"}).attrs[
-                    "content"
-                ]
-                image_url = soup.find("meta", attrs={"property": "og:image"}).attrs[
-                    "content"
-                ]
-                description = soup.find("p", id="description").get_text()
-                embedVar = discord.Embed(
-                    title=waifu_title, color=discord.Color.from_rgb(
-                        208, 189, 255)
-                )
-                embedVar.description = f"{description}"
-                embedVar.set_image(url=image_url)
-                await ctx.send(embed=embedVar)
-
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
-
-
-def setup(bot):
-    bot.add_cog(waifu(bot))
+import asyncio
+
+import aiohttp
+import bs4
+import discord
+import orjson
+import uvloop
+from discord.ext import commands
+from discord.commands import slash_command
+
+
+class waifu(commands.Cog):
+    def __init__(self, bot):
+        self.bot = bot
+
+    @slash_command(
+        name="waifu",
+        description="Gives you a random waifu",
+        guild_ids=[866199405090308116],
+    )
+    async def on_message(self, ctx):
+        async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
+            headers = {
+                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36"
+            }
+            async with session.get(
+                "https://www.mywaifulist.moe/random", headers=headers
+            ) as r:
+                data = await r.text()
+                soup = bs4.BeautifulSoup(data, "lxml")
+                waifu_title = soup.find("meta", attrs={"property": "og:title"}).attrs[
+                    "content"
+                ]
+                image_url = soup.find("meta", attrs={"property": "og:image"}).attrs[
+                    "content"
+                ]
+                description = soup.find("p", id="description").get_text()
+                embedVar = discord.Embed(
+                    title=waifu_title, color=discord.Color.from_rgb(
+                        208, 189, 255)
+                )
+                embedVar.description = f"{description}"
+                embedVar.set_image(url=image_url)
+                await ctx.respond(embed=embedVar)
+
+
+    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
+
+
+def setup(bot):
+    bot.add_cog(waifu(bot))
-- 
2.35.1

