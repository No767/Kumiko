From c5b3bfce50d359c7c685e0174a402db24221519f Mon Sep 17 00:00:00 2001
From: github-actions <41898282+github-actions[bot]@users.noreply.github.com>
Date: Sat, 15 Jan 2022 05:54:53 +0000
Subject: [PATCH] Format All Cogs

---
 Bot/Cogs/clear.py                      |  5 +-
 Bot/Cogs/deviantart-token-refresher.py |  2 +-
 Bot/Cogs/deviantart.py                 |  4 +-
 Bot/Cogs/global-error-handling.py      |  5 +-
 Bot/Cogs/hypixel.py                    |  4 +-
 Bot/Cogs/jikan.py                      | 26 ++++++---
 Bot/Cogs/jisho.py                      | 25 ++++++---
 Bot/Cogs/mangadex.py                   |  4 +-
 Bot/Cogs/pinterest.py                  | 74 ++++++++++++++++++--------
 Bot/Cogs/rinping.py                    |  5 +-
 10 files changed, 103 insertions(+), 51 deletions(-)

diff --git a/Bot/Cogs/clear.py b/Bot/Cogs/clear.py
index d5a9e42..13bea49 100644
--- a/Bot/Cogs/clear.py
+++ b/Bot/Cogs/clear.py
@@ -1,9 +1,9 @@
+import asyncio
 import random
 
 import discord
-from discord.ext import commands
-import asyncio
 import uvloop
+from discord.ext import commands
 
 
 def discord_colors():
@@ -46,5 +46,6 @@ class clearMessages(commands.Cog):
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
+
 def setup(bot):
     bot.add_cog(clearMessages(bot))
diff --git a/Bot/Cogs/deviantart-token-refresher.py b/Bot/Cogs/deviantart-token-refresher.py
index 278335a..78aa562 100644
--- a/Bot/Cogs/deviantart-token-refresher.py
+++ b/Bot/Cogs/deviantart-token-refresher.py
@@ -5,7 +5,7 @@ import aiohttp
 import orjson
 from discord.ext import commands, tasks
 from dotenv import load_dotenv
-from sqlalchemy import Column, MetaData, String, Table, create_engine
+from sqlalchemy import Column, MetaData, String, Table
 from sqlalchemy.ext.asyncio import create_async_engine
 
 load_dotenv()
diff --git a/Bot/Cogs/deviantart.py b/Bot/Cogs/deviantart.py
index 2a04373..1db70ca 100644
--- a/Bot/Cogs/deviantart.py
+++ b/Bot/Cogs/deviantart.py
@@ -5,7 +5,7 @@ import discord
 import orjson
 from discord.ext import commands
 from dotenv import load_dotenv
-from sqlalchemy import Column, MetaData, String, Table, create_engine
+from sqlalchemy import Column, MetaData, String, Table
 from sqlalchemy.ext.asyncio import create_async_engine
 
 load_dotenv()
@@ -18,7 +18,7 @@ Username = os.getenv("Postgres_Username")
 class tokenFetcher:
     def __init__(self):
         self.self = self
-        
+
     async def get(self):
         meta = MetaData()
         engine = create_async_engine(
diff --git a/Bot/Cogs/global-error-handling.py b/Bot/Cogs/global-error-handling.py
index 0aac99d..220e651 100644
--- a/Bot/Cogs/global-error-handling.py
+++ b/Bot/Cogs/global-error-handling.py
@@ -1,7 +1,8 @@
-import discord
-from discord.ext import commands
 import asyncio
+
+import discord
 import uvloop
+from discord.ext import commands
 
 
 class ErrorHandler(commands.Cog):
diff --git a/Bot/Cogs/hypixel.py b/Bot/Cogs/hypixel.py
index 7842098..8826103 100644
--- a/Bot/Cogs/hypixel.py
+++ b/Bot/Cogs/hypixel.py
@@ -1,12 +1,12 @@
+import asyncio
 import os
 
 import aiohttp
 import discord
 import orjson
+import uvloop
 from discord.ext import commands
 from dotenv import load_dotenv
-import asyncio
-import uvloop
 
 load_dotenv()
 
diff --git a/Bot/Cogs/jikan.py b/Bot/Cogs/jikan.py
index da533a8..9bcfde2 100644
--- a/Bot/Cogs/jikan.py
+++ b/Bot/Cogs/jikan.py
@@ -43,8 +43,8 @@ class JikanV1(commands.Cog):
                         )
                         embedVar.add_field(
                             name="Title Synonyms",
-                            value=str(anime_info_v2["title_synonyms"])
-                            .replace("'", ""),
+                            value=str(anime_info_v2["title_synonyms"]).replace(
+                                "'", ""),
                             inline=True,
                         )
                         embedVar.add_field(
@@ -93,9 +93,21 @@ class JikanV1(commands.Cog):
                             value=anime_info_v2["favorites"],
                             inline=True,
                         )
-                        embedVar.add_field(name="Official Site", value=anime_info_v2["external_links"][0]["url"], inline=True)
-                        embedVar.add_field(name="AnimeDB", value=anime_info_v2["external_links"][1]["url"], inline=True)
-                        embedVar.add_field(name="AnimeNewsNetwork", value=anime_info_v2["external_links"][2]["url"], inline=True)
+                        embedVar.add_field(
+                            name="Official Site",
+                            value=anime_info_v2["external_links"][0]["url"],
+                            inline=True,
+                        )
+                        embedVar.add_field(
+                            name="AnimeDB",
+                            value=anime_info_v2["external_links"][1]["url"],
+                            inline=True,
+                        )
+                        embedVar.add_field(
+                            name="AnimeNewsNetwork",
+                            value=anime_info_v2["external_links"][2]["url"],
+                            inline=True,
+                        )
                         embedVar2.description = f"{str(anime_info_v2['synopsis']).replace('[Written by MAL Rewrite]', '')}"
                         embedVar2.add_field(
                             name="Background",
@@ -165,8 +177,8 @@ class JikanV2(commands.Cog):
                         )
                         embedVar.add_field(
                             name="Title Synonyms",
-                            value=str(manga_info_v1["title_synonyms"])
-                            .replace("'", ""),
+                            value=str(manga_info_v1["title_synonyms"]).replace(
+                                "'", ""),
                             inline=True,
                         )
                         embedVar.add_field(
diff --git a/Bot/Cogs/jisho.py b/Bot/Cogs/jisho.py
index 4e17bba..89c109f 100644
--- a/Bot/Cogs/jisho.py
+++ b/Bot/Cogs/jisho.py
@@ -1,15 +1,16 @@
+import asyncio
 import re
 
+import aiohttp
 import discord
 import orjson
-import aiohttp
+import uvloop
 from discord.ext import commands
 from jamdict import Jamdict
-import asyncio
-import uvloop
 
 jam = Jamdict()
 
+
 def kanjiv2(search):
     res = jam.lookup(search.replace("\n", " "))
     for c in res.chars:
@@ -57,7 +58,9 @@ class jisho_dict(commands.Cog):
     async def jisho(self, ctx, search: str):
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
             params = {"keyword": search}
-            async with session.get("https://jisho.org/api/v1/search/words", params=params) as r:
+            async with session.get(
+                "https://jisho.org/api/v1/search/words", params=params
+            ) as r:
                 jisho = await r.json()
                 try:
                     res = jam.lookup(search)
@@ -68,9 +71,15 @@ class jisho_dict(commands.Cog):
                         inline=False,
                     )
                     embedVar.add_field(
-                        name="Position of Speech (POS)", value=jisho["data"][0]["senses"][0]["parts_of_speech"], inline=False
+                        name="Position of Speech (POS)",
+                        value=jisho["data"][0]["senses"][0]["parts_of_speech"],
+                        inline=False,
+                    )
+                    embedVar.add_field(
+                        name="Is Common?",
+                        value=jisho["data"][0]["is_common"],
+                        inline=False,
                     )
-                    embedVar.add_field(name="Is Common?", value=jisho["data"][0]["is_common"], inline=False)
                     embedVar.add_field(
                         name="Other Info",
                         value=f"Tags >> {jisho['data'][0]['tags']}\nJLPT >> {jisho['data'][0]['tags']}\nAntonyms >> {jisho['data'][0]['senses'][0]['antonyms']}\nSee Also >> {jisho['data'][0]['senses'][0]['see_also']}\nLinks >> {jisho['data'][0]['senses'][0]['links']}",
@@ -86,8 +95,8 @@ class jisho_dict(commands.Cog):
                         value=f"{jisho['meta']['status']}",
                         inline=False,
                     )
-                    embedVar.description = str([str(word[0])
-                                               for word in res.entries])
+                    embedVar.description = str(
+                        [str(word[0]) for word in res.entries])
                     await ctx.send(embed=embedVar)
                 except Exception as e:
                     embed_discord = discord.Embed()
diff --git a/Bot/Cogs/mangadex.py b/Bot/Cogs/mangadex.py
index 8454233..d49ac0b 100644
--- a/Bot/Cogs/mangadex.py
+++ b/Bot/Cogs/mangadex.py
@@ -1,13 +1,13 @@
+import asyncio
 import os
 
 import aiohttp
 import discord
 import orjson
+import uvloop
 from discord.ext import commands
 from dotenv import load_dotenv
 from reactionmenu import ReactionMenu
-import asyncio
-import uvloop
 
 load_dotenv()
 
diff --git a/Bot/Cogs/pinterest.py b/Bot/Cogs/pinterest.py
index 62a31ca..7c4f6a4 100644
--- a/Bot/Cogs/pinterest.py
+++ b/Bot/Cogs/pinterest.py
@@ -1,12 +1,12 @@
+import asyncio
 import os
 
 import aiohttp
 import discord
 import orjson
+import uvloop
 from discord.ext import commands
 from dotenv import load_dotenv
-import asyncio
-import uvloop
 
 load_dotenv()
 
@@ -63,24 +63,32 @@ class PinterestV2(commands.Cog):
     async def user(self, ctx, id: int):
         headers = {"Authorization": f"Bearer {Pinterest_API_Access_Token}"}
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
-            async with session.get(f"https://api.pinterest.com/v5/pins/{id}", headers=headers) as r:
+            async with session.get(
+                f"https://api.pinterest.com/v5/pins/{id}", headers=headers
+            ) as r:
                 pin = await r.json()
                 try:
                     embedVar = discord.Embed(
-                        title=pin["title"], color=discord.Color.from_rgb(255, 187, 179)
+                        title=pin["title"], color=discord.Color.from_rgb(
+                            255, 187, 179)
                     )
                     embedVar.add_field(
                         name="Description", value=pin["description"], inline=True
                     )
                     embedVar.add_field(
-                        name="Alt Text", value=pin["alt_text"], inline=True)
+                        name="Alt Text", value=pin["alt_text"], inline=True
+                    )
                     embedVar.add_field(
-                        name="Board Owner", value=pin["board_owner"]["username"], inline=True
+                        name="Board Owner",
+                        value=pin["board_owner"]["username"],
+                        inline=True,
                     )
                     embedVar.add_field(
-                        name="Board ID", value=pin["board_id"], inline=True)
+                        name="Board ID", value=pin["board_id"], inline=True
+                    )
                     embedVar.add_field(name="ID", value=pin["id"], inline=True)
-                    embedVar.add_field(name="Link", value=pin["link"], inline=True)
+                    embedVar.add_field(
+                        name="Link", value=pin["link"], inline=True)
                     embedVar.add_field(
                         name="Created At",
                         value=str(pin["created_at"]).replace("T", " "),
@@ -89,12 +97,15 @@ class PinterestV2(commands.Cog):
                     embedVar.set_image(url=pin["media"]["originals"]["url"])
                     await ctx.send(embed=embedVar)
                 except Exception as e:
-                    embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
+                    embedVar = discord.Embed(
+                        color=discord.Color.from_rgb(255, 51, 51))
                     embedVar.description = "It seems like this query failed."
                     embedVar.add_field(name="Reason", value=e, inline=True)
-                    embedVar.add_field(name="Code", value=pin["code"], inline=True)
                     embedVar.add_field(
-                        name="Message", value=pin["message"], inline=True)
+                        name="Code", value=pin["code"], inline=True)
+                    embedVar.add_field(
+                        name="Message", value=pin["message"], inline=True
+                    )
                     await ctx.send(embed=embedVar)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
@@ -122,35 +133,52 @@ class PinterestV3(commands.Cog):
         board_list = get_list_board(board_id)
         headers = {"Authorization": f"Bearer {Pinterest_API_Access_Token}"}
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
-            async with session.get(f"https://api.pinterest.com/v5/boards/{board_id}", headers=headers) as r:
+            async with session.get(
+                f"https://api.pinterest.com/v5/boards/{board_id}", headers=headers
+            ) as r:
                 board = await r.json()
-                async with session.get(f"https://api.pinterest.com/v5/boards/{board_id}/pins", headers=headers) as response:
+                async with session.get(
+                    f"https://api.pinterest.com/v5/boards/{board_id}/pins",
+                    headers=headers,
+                ) as response:
                     board_list = await response.json()
                     try:
                         embedVar = discord.Embed(
-                            color=discord.Color.from_rgb(192, 255, 173))
-                        embedVar.add_field(name="Name", value=board["name"], inline=True)
+                            color=discord.Color.from_rgb(192, 255, 173)
+                        )
+                        embedVar.add_field(
+                            name="Name", value=board["name"], inline=True
+                        )
                         embedVar.add_field(
                             name="Description", value=board["description"], inline=True
                         )
                         embedVar.add_field(
                             name="Owner", value=board["owner"]["username"], inline=True
                         )
-                        embedVar.add_field(name="ID", value=board["id"], inline=True)
                         embedVar.add_field(
-                            name="Privacy", value=board["privacy"], inline=True)
+                            name="ID", value=board["id"], inline=True)
+                        embedVar.add_field(
+                            name="Privacy", value=board["privacy"], inline=True
+                        )
                         embedVar.add_field(
-                            name="Total Pins", value=len(board_list["items"]), inline=True
+                            name="Total Pins",
+                            value=len(board_list["items"]),
+                            inline=True,
                         )
                     except Exception as e:
-                        embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
+                        embedVar = discord.Embed(
+                            color=discord.Color.from_rgb(255, 51, 51)
+                        )
                         embedVar.description = "It seems like this query failed."
                         embedVar.add_field(name="Reason", value=e, inline=True)
-                        embedVar.add_field(name="Code", value=board["code"], inline=True)
                         embedVar.add_field(
-                            name="Message", value=board["message"], inline=True)
+                            name="Code", value=board["code"], inline=True
+                        )
+                        embedVar.add_field(
+                            name="Message", value=board["message"], inline=True
+                        )
                         await ctx.send(embed=embedVar)
-                        
+
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
     @board.error
@@ -162,7 +190,7 @@ class PinterestV3(commands.Cog):
             embedVar.description = f"Missing a required argument: {error.param}"
             msg = await ctx.send(embed=embedVar, delete_after=10)
             await msg.delete(delay=10)
-            
+
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
 
diff --git a/Bot/Cogs/rinping.py b/Bot/Cogs/rinping.py
index 18d66d4..95527a6 100644
--- a/Bot/Cogs/rinping.py
+++ b/Bot/Cogs/rinping.py
@@ -1,7 +1,8 @@
-import discord
-from discord.ext import commands
 import asyncio
+
+import discord
 import uvloop
+from discord.ext import commands
 
 
 class rinping(commands.Cog):
-- 
2.25.1

