From 4dd03075f434a0fd479b14c6fd96879f8ad18185 Mon Sep 17 00:00:00 2001
From: No767 <73260931+No767@users.noreply.github.com>
Date: Sun, 6 Mar 2022 23:31:56 -0800
Subject: [PATCH] Add Modrinth API Support

took quite a while, but should be done
---
 Bot/Cogs/modrinth.py | 247 +++++++++++++++++++++++++++++++++++++++++++
 Bot/rinbot.py        |   1 +
 2 files changed, 248 insertions(+)
 create mode 100644 Bot/Cogs/modrinth.py

diff --git a/Bot/Cogs/modrinth.py b/Bot/Cogs/modrinth.py
new file mode 100644
index 0000000..023b2f4
--- /dev/null
+++ b/Bot/Cogs/modrinth.py
@@ -0,0 +1,247 @@
+import asyncio
+
+import aiohttp
+import discord
+import orjson
+import uvloop
+from discord.commands import Option, slash_command
+from discord.ext import commands
+
+class ModrinthV1(commands.Cog):
+    def __init__(self, bot):
+        self.bot = bot
+        
+    @slash_command(name="modrinth-search", description="Searches for up to 5 mods on Modrinth", guild_ids=[866199405090308116])
+    async def modrinthSearch(self, ctx, *, mod: Option(str, "The name of the mod"), modloader: Option(str, "Forge or Fabric")):
+        async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
+            params = {"query": mod, "index": "relevance", "limit": 5, "facets": f'[["categories:{modloader}"]]'}
+            async with session.get("https://api.modrinth.com/v2/search", params=params) as r:
+                data = await r.json()
+                modFilter = ["title", "gallery", "icon_url", "description"]
+                embedVar = discord.Embed()
+                try:
+                    for dictItem in data["hits"]:
+                        for k, v in dictItem.items():
+                            if k not in modFilter:
+                                embedVar.add_field(name=k, value=v, inline=True)
+                                embedVar.remove_field(-13)
+                        embedVar.title = dictItem["title"]
+                        embedVar.description = dictItem["description"]
+                        embedVar.set_thumbnail(url=dictItem["icon_url"])
+                        await ctx.respond(embed=embedVar)
+                except Exception as e:
+                    embedVar.description = "Sorry, but the query could not be made. Please try again..."
+                    embedVar.add_field(name="Reason", value=e, inline=True)
+                    await ctx.respond(embed=embedVar)
+    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
+    
+class ModrinthV2(commands.Cog):
+    def __init__(self, bot):
+        self.bot = bot
+        
+    @slash_command(name="modrinth-mod", description="Gets info about the mod requested", guild_ids=[866199405090308116])
+    async def modrinthProject(self, ctx, *, mod_slug: Option(str, "The ID or slug of the project")):
+        async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
+            async with session.get(f"https://api.modrinth.com/v2/project/{mod_slug}") as res:
+                try:
+                    modData = await res.json()
+                    modDataFilter = ["versions", "license", "icon_url", "body", "title", "description", "donation_urls", "gallery", "moderator_message", "body_url"]
+                    embedVar = discord.Embed()
+                    for keys, value in modData.items():
+                        if keys not in modDataFilter:
+                            embedVar.add_field(name=keys, value=value, inline=True)
+                    for item in modData["gallery"]:
+                        embedVar.set_image(url=item["url"])
+                    for k, v in modData["license"].items():
+                        embedVar.add_field(name=f"License {k}", value=v, inline=True)
+                    embedVar.set_thumbnail(url=modData["icon_url"])
+                    embedVar.title = modData["title"]
+                    embedVar.description = f"{modData['description']}\n\n{modData['body']}"
+                    await ctx.respond(embed=embedVar)
+                except Exception as e:
+                    embedVar.description = "Sorry, but the query could not be made. Please try again..."
+                    embedVar.add_field(name="Reason", value=e, inline=True)
+                    await ctx.respond(embed=embedVar)
+
+class ModrinthV3(commands.Cog):
+    def __init__(self, bot):
+        self.bot = bot
+        
+    @slash_command(name="modrinth-mod-versions", description="Lists out all of the versions for a mod (may cause spam)", guild_ids=[866199405090308116])
+    async def modrinthProjectVersion(self, ctx, *, mod_name: Option(str, "The name of the mod or project"), loaders: Option(str, "The types of modloaders to filter out - Forge or Fabric", required=False,  choices=["Forge", "Fabric"]), game_version: Option(str, "The version of Minecraft", required=False)):
+        async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
+            params = {"loaders": f"[{str(loaders).lower()}]", "game_versions": f"[{game_version}]"}
+            async with session.get(f"https://api.modrinth.com/v2/project/{mod_name}/version", params=params) as res:
+                versionData = await res.json()
+                versionFilter = ["changelog", "name", "dependencies", "files"]
+                embedVar = discord.Embed()
+                try:
+                    for dictVersions in versionData:
+                        for keys, value in dictVersions.items():
+                            if keys not in versionFilter:
+                                embedVar.add_field(name=keys, value=value, inline=True)
+                                embedVar.remove_field(5)
+                        for fileItems in dictVersions["files"]:
+                            for k, v in fileItems.items():
+                                if k not in "hashes":
+                                    embedVar.add_field(name=k, value=v, inline=True)
+                            for hashKey, hashValue in fileItems["hashes"].items():
+                                embedVar.add_field(name=hashKey, value=hashValue, inline=True)
+                        embedVar.title = dictVersions["name"]
+                        embedVar.description = dictVersions["changelog"]
+                        await ctx.respond(embed=embedVar)
+                except Exception as e:
+                    embedVar.description = "Sorry, but the query could not be made. Please try again..."
+                    embedVar.add_field(name="Reason", value=e, inline=True)
+                    await ctx.respond(embed=embedVar)
+                    
+class ModrinthV4(commands.Cog):
+    def __init__(self, bot):
+        self.bot = bot
+        
+    @slash_command(name="modrinth-mod-version", description="Returns info on the given mod version ID", guild_ids=[866199405090308116])
+    async def modrinthModVersion(self, ctx, *, mod_version_id: Option(str, "The ID of the mod version")):
+        async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
+            async with session.get(f"https://api.modrinth.com/v2/version/{mod_version_id}") as r:
+                data = await r.json()
+                versionFilter = ["changelog", "name", "dependencies", "files"]
+                embedVar = discord.Embed()
+                try:
+                    for keys, value in data.items():
+                        if keys not in versionFilter:
+                            embedVar.add_field(name=keys, value=value, inline=True)
+                    for fileItems in data["files"]:
+                        for k, v in fileItems.items():
+                            if k not in "hashes":
+                                embedVar.add_field(name=k, value=v, inline=True)
+                        for hashKey, hashValue in fileItems["hashes"].items():
+                            embedVar.add_field(name=hashKey, value=hashValue, inline=True)
+                    embedVar.title = data["name"]
+                    embedVar.description = data["changelog"]
+                    await ctx.respond(embed=embedVar)
+                except Exception as e:
+                    embedVar.description = "Sorry, but the query could not be made. Please try again..."
+                    embedVar.add_field(name="Reason", value=e, inline=True)
+                    await ctx.respond(embed=embedVar)
+
+class ModrinthV5(commands.Cog):
+    def __init__(self, bot):
+        self.bot = bot
+        
+    @slash_command(name="modrinth-user", description="Returns info on the given user", guild_ids=[866199405090308116])
+    async def modrinthUser(self, ctx, *, username: Option(str, "The username or ID of the user")):
+        async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
+            async with session.get(f"https://api.modrinth.com/v2/user/{username}") as response:
+                userData = await response.json()
+                embedVar = discord.Embed()
+                userFilter = ["bio", "username", "avatar_url"]
+                try:
+                    for userKeys, userValue in userData.items():
+                        if userKeys not in userFilter:
+                            embedVar.add_field(name=userKeys, value=userValue, inline=True)
+                    embedVar.title = userData["username"]
+                    embedVar.description = userData["bio"]
+                    embedVar.set_thumbnail(url=userData["avatar_url"])
+                    await ctx.respond(embed=embedVar)
+                except Exception as e:
+                    embedVar.description = "Sorry, but the query could not be made. Please try again..."
+                    embedVar.add_field(name="Reason", value=e, inline=True)
+                    await ctx.respond(embed=embedVar)
+
+class ModrinthV6(commands.Cog):
+    def __init__(self, bot):
+        self.bot = bot
+        
+    @slash_command(name="modrinth-user-projects", description="Returns info on the given user's projects", guild_ids=[866199405090308116])
+    async def modrinthUserProjects(self, ctx, *, username: Option(str, "The username or ID of the user")):
+        async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
+            async with session.get(f"https://api.modrinth.com/v2/user/{username}/projects") as r:
+                data = await r.json()
+                userProjectsFilter = ["body", "license", "title", "description", "icon_url", "versions",
+                                      "donation_urls", "gallery"]
+                embedVar = discord.Embed()
+                try:
+                    for dictProjects in data:
+                        for keys, value in dictProjects.items():
+                            if keys not in userProjectsFilter:
+                                embedVar.add_field(name=keys, value=value, inline=True)
+                        for licenseItem, licenseRes in dictProjects["license"].items():
+                            embedVar.add_field(name=f"License {licenseItem}", value=licenseRes, inline=True)
+                        for donationKeys, donationValues in dictProjects["donation_urls"].items():
+                            embedVar.add_field(name=f"Donation {donationKeys}", value=donationValues, inline=True)
+                        embedVar.title = dictProjects["title"]
+                        embedVar.description = dictProjects["description"]
+                        embedVar.set_thumbnail(url=dictProjects["icon_url"])
+                        await ctx.respond(embed=embedVar)
+
+                except Exception as e:
+                    embedVar.description = "Sorry, but the query could not be made. Please try again..."
+                    embedVar.add_field(name="Reason", value=e, inline=True)
+                    await ctx.respond(embed=embedVar)
+                
+                    
+class ModrinthV7(commands.Cog):
+    def __init__(self, bot):
+        self.bot = bot
+        
+    @slash_command(name="modrinth-project-team-members", description="Returns the team memebers of a project", guild_ids=[866199405090308116])
+    async def modrinthProjectTeamMembers(self, ctx, *, project: Option(str, "The slug or ID of the project")):
+        async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
+            async with session.get(f"https://api.modrinth.com/v2/project/{project}/members") as r:
+                projectData = await r.json()
+                projectTeamFilter = ["bio", "avatar_url", "username"]
+                embedVar = discord.Embed()
+                try:
+                    for dictTeam in projectData:
+                        for keys, value in dictTeam.items():
+                            if keys not in "user":
+                                embedVar.add_field(name=keys, value=value, inline=True)
+                        for k, v in dictTeam["user"].items():
+                            if k not in projectTeamFilter:
+                                embedVar.add_field(name=k, value=v, inline=True)
+                        embedVar.title = dictTeam["user"]["username"]
+                        embedVar.description = dictTeam["user"]["bio"]
+                        embedVar.set_thumbnail(url=dictTeam["user"]["avatar_url"])
+                        await ctx.respond(embed=embedVar)
+                except Exception as e:
+                    embedVar.description = "Sorry, but the query could not be made. Please try again..."
+                    embedVar.add_field(name="Reason", value=e, inline=True)
+                    await ctx.respond(embed=embedVar)
+                    
+class ModrinthV8(commands.Cog):
+    def __init__(self, bot):
+        self.bot = bot
+        
+    @slash_command(name="modrinth-team-members", description="Returns the members within the given team", guild_ids=[866199405090308116])
+    async def modrinthTeamMembers(self, ctx, *, team_id: Option(str, "The ID of the team")):
+        async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
+            async with session.get(f"https://api.modrinth.com/v2/team/{team_id}/members") as r:
+                teamData = await r.json()
+                teamFilter = ["bio", "avatar_url", "username"]
+                embedVar = discord.Embed()
+                try:
+                    for dictTeam2 in teamData:
+                        for keys, value in dictTeam2.items():
+                            if keys not in "user":
+                                embedVar.add_field(name=keys, value=value, inline=True)
+                        for k, v in dictTeam2["user"].items():
+                            if k not in teamFilter:
+                                embedVar.add_field(name=k, value=v, inline=True)
+                        embedVar.title = dictTeam2["user"]["username"]
+                        embedVar.description = dictTeam2["user"]["bio"]
+                        embedVar.set_thumbnail(url=dictTeam2["user"]["avatar_url"])
+                        await ctx.respond(embed=embedVar)
+                except Exception as e:
+                    embedVar.description = "Sorry, but the query could not be made. Please try again..."
+                    embedVar.add_field(name="Reason", value=e, inline=True)
+                    await ctx.respond(embed=embedVar)
+def setup(bot):
+    bot.add_cog(ModrinthV1(bot))
+    bot.add_cog(ModrinthV2(bot))
+    bot.add_cog(ModrinthV3(bot))
+    bot.add_cog(ModrinthV4(bot))
+    bot.add_cog(ModrinthV5(bot))
+    bot.add_cog(ModrinthV6(bot))
+    bot.add_cog(ModrinthV7(bot))
+    bot.add_cog(ModrinthV8(bot))
+    
\ No newline at end of file
diff --git a/Bot/rinbot.py b/Bot/rinbot.py
index 69d5d3a..03ad09d 100644
--- a/Bot/rinbot.py
+++ b/Bot/rinbot.py
@@ -39,6 +39,7 @@ initial_extensions = [
     "Cogs.bot-info",
     "Cogs.openai-gpt3",
     "Cogs.help",
+    "Cogs.modrinth",
 ]
 for extension in initial_extensions:
     bot.load_extension(extension)
-- 
2.35.1

