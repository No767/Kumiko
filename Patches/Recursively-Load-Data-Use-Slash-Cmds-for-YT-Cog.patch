From 44c3c99d7debc95475aac7dd19b6ebc405a1455f Mon Sep 17 00:00:00 2001
From: No767 <73260931+No767@users.noreply.github.com>
Date: Sat, 12 Feb 2022 00:41:32 -0800
Subject: [PATCH 1/2] Recursively Load Data + Use Slash Cmds for YT Cog

Should bring massive performance upgrades for the yt cog. and now all cmds will not have aliases...
---
 Bot/Cogs/youtube.py | 530 +++++++++-----------------------------------
 1 file changed, 106 insertions(+), 424 deletions(-)

diff --git a/Bot/Cogs/youtube.py b/Bot/Cogs/youtube.py
index d2c58cd..3141110 100644
--- a/Bot/Cogs/youtube.py
+++ b/Bot/Cogs/youtube.py
@@ -6,6 +6,7 @@ import discord
 import orjson
 import uvloop
 from discord.ext import commands
+from discord.commands import slash_command, Option
 from dotenv import load_dotenv
 
 load_dotenv()
@@ -17,8 +18,8 @@ class YoutubeV1(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
 
-    @commands.command(name="youtube-search", aliases=["yt-search"])
-    async def youtube_search(self, ctx, *, search: str):
+    @slash_command(name="youtube-search", description="Finds up to 5 videos on YouTube based on the given search term", guild_ids=[866199405090308116])
+    async def youtube_search(self, ctx, *, search: Option(str, "Video Search Term")):
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
             params = {
                 "key": YouTube_API_Key,
@@ -58,7 +59,7 @@ class YoutubeV1(commands.Cog):
                                 embedVar.remove_field(3)
                             embedVar.title = dictItem["snippet"]["title"]
                         embedVar.description = dictItem["snippet"]["description"]
-                        await ctx.send(embed=embedVar)
+                        await ctx.respond(embed=embedVar)
 
                 except Exception as e:
                     embedError = discord.Embed()
@@ -66,19 +67,7 @@ class YoutubeV1(commands.Cog):
                         f"No results found for {search}. Please try again..."
                     )
                     embedError.add_field(name="Error", value=e, inline=True)
-                    await ctx.send(embed=embedError)
-
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
-
-    @youtube_search.error
-    async def on_message_error(
-        self, ctx: commands.Context, error: commands.CommandError
-    ):
-        if isinstance(error, commands.MissingRequiredArgument):
-            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
-            embedVar.description = f"Missing a requireed argument: {error.param}"
-            msg = await ctx.send(embed=embedVar, delete_after=10)
-            await msg.delete(delay=10)
+                    await ctx.respond(embed=embedError)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
@@ -87,15 +76,15 @@ class YoutubeV2(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
 
-    @commands.command(name="youtube-channel", aliases=["yt-channel"])
-    async def youtube_channel(self, ctx, *, search: str):
+    @slash_command(name="youtube-channel", description="Returns Given YouTube Channel Info", guild_ids=[866199405090308116])
+    async def youtube_channel(self, ctx, *, channel: Option(str, "Channel Name")):
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
             search_params = {
                 "key": YouTube_API_Key,
                 "part": "snippet",
                 "type": "channel",
                 "maxResults": "1",
-                "q": search,
+                "q": channel,
                 "channelType": "any",
                 "videoLicense": "any",
                 "order": "relevance",
@@ -118,66 +107,47 @@ class YoutubeV2(commands.Cog):
                         embedVar = discord.Embed(
                             color=discord.Color.from_rgb(255, 0, 0)
                         )
-                        embedVar.title = data["items"][0]["snippet"]["title"]
-                        embedVar.add_field(
-                            name="View Count",
-                            value=data["items"][0]["statistics"]["viewCount"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Subscriber Count",
-                            value=data["items"][0]["statistics"]["subscriberCount"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Video Count",
-                            value=data["items"][0]["statistics"]["videoCount"],
-                            inline=True,
-                        )
-                        embedVar.description = data["items"][0]["snippet"][
-                            "description"
-                        ]
-                        embedVar.set_thumbnail(
-                            url=data["items"][0]["snippet"]["thumbnails"]["high"]["url"]
-                        )
-                        await ctx.send(embed=embedVar)
+                        filter = {"kind", "etag", "snippet", "statistics", "localized"}
+                        snippetFilter = ["title", "description", "thumbnails", "localized"]
+                        for dictItem in data["items"]:
+                            for key, val in dictItem.items():
+                                if key not in filter:
+                                    embedVar.add_field(name=key, value=val, inline=True)
+                            for k, v in dictItem["snippet"].items():
+                                if k not in snippetFilter:
+                                    embedVar.add_field(name=k, value=v, inline=True)
+                            for keys, value in dictItem["statistics"].items():
+                                embedVar.add_field(name=keys, value=value, inline=True)
+                            embedVar.title = dictItem["snippet"]["title"]
+                            embedVar.description = dictItem["snippet"]["description"]
+                            embedVar.set_thumbnail(url=dictItem["snippet"]["thumbnails"]["high"]["url"])
+                            await ctx.respond(embed=embedVar)
                     except Exception as e:
                         embedError = discord.Embed()
                         embedError.description = (
-                            f"No results found for {search}. Please try again..."
+                            f"No results found for {channel}. Please try again..."
                         )
                         embedError.add_field(
                             name="Error", value=e, inline=True)
-                        await ctx.send(embed=embedError)
+                        await ctx.respond(embed=embedError)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
-    @youtube_channel.error
-    async def on_message_error(
-        self, ctx: commands.Context, error: commands.CommandError
-    ):
-        if isinstance(error, commands.MissingRequiredArgument):
-            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
-            embedVar.description = f"Missing a requireed argument: {error.param}"
-            msg = await ctx.send(embed=embedVar, delete_after=10)
-            await msg.delete(delay=10)
-
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
 
 class YoutubeV3(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
 
-    @commands.command(name="youtube-playlists", aliases=["yt-playlists"])
-    async def youtube_playlists(self, ctx, *, search: str):
+    @slash_command(name="youtube-playlists", description="Returns up to 5 YouTube playlists based on the given YT channel", guild_ids=[866199405090308116])
+    async def youtube_playlists(self, ctx, *, channel_name: Option(str, "Channel Name")):
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
             search_params = {
                 "key": YouTube_API_Key,
                 "part": "snippet",
                 "type": "playlists",
                 "maxResults": "1",
-                "q": search,
+                "q": channel_name,
             }
             async with session.get(
                 "https://www.googleapis.com/youtube/v3/search", params=search_params
@@ -196,141 +166,41 @@ class YoutubeV3(commands.Cog):
                 ) as r2:
                     data = await r2.json()
                     try:
-                        embedVar1 = discord.Embed(
+                        embedVar = discord.Embed(
                             color=discord.Color.from_rgb(255, 224, 224)
                         )
-                        embedVar1.title = data["items"][0]["snippet"]["title"]
-                        embedVar1.description = data["items"][0]["snippet"][
-                            "description"
-                        ]
-                        embedVar1.add_field(
-                            name="Channel",
-                            value=data["items"][0]["snippet"]["channelTitle"],
-                            inline=True,
-                        )
-                        embedVar1.add_field(
-                            name="Amount of Videos in Playlist",
-                            value=data["items"][0]["contentDetails"]["itemCount"],
-                            inline=True,
-                        )
-                        embedVar1.set_image(
-                            url=data["items"][0]["snippet"]["thumbnails"]["maxres"][
-                                "url"
-                            ]
-                        )
-                        await ctx.send(embed=embedVar1)
-                        embedVar2 = discord.Embed(
-                            color=discord.Color.from_rgb(249, 255, 224)
-                        )
-                        embedVar2.title = data["items"][1]["snippet"]["title"]
-                        embedVar2.description = data["items"][1]["snippet"][
-                            "description"
-                        ]
-                        embedVar2.add_field(
-                            name="Channel",
-                            value=data["items"][1]["snippet"]["channelTitle"],
-                            inline=True,
-                        )
-                        embedVar2.add_field(
-                            name="Amount of Videos in Playlist",
-                            value=data["items"][1]["contentDetails"]["itemCount"],
-                            inline=True,
-                        )
-                        embedVar2.set_image(
-                            url=data["items"][1]["snippet"]["thumbnails"]["maxres"][
-                                "url"
-                            ]
-                        )
-                        await ctx.send(embed=embedVar2)
-                        embedVar3 = discord.Embed(
-                            color=discord.Color.from_rgb(224, 255, 228)
-                        )
-                        embedVar3.title = data["items"][2]["snippet"]["title"]
-                        embedVar3.description = data["items"][2]["snippet"][
-                            "description"
-                        ]
-                        embedVar3.add_field(
-                            name="Channel",
-                            value=data["items"][2]["snippet"]["channelTitle"],
-                            inline=True,
-                        )
-                        embedVar3.add_field(
-                            name="Amount of Videos in Playlist",
-                            value=data["items"][2]["contentDetails"]["itemCount"],
-                            inline=True,
-                        )
-                        embedVar3.set_image(
-                            url=data["items"][2]["snippet"]["thumbnails"]["maxres"][
-                                "url"
-                            ]
-                        )
-                        await ctx.send(embed=embedVar3)
-                        embedVar4 = discord.Embed(
-                            color=discord.Color.from_rgb(224, 240, 255)
-                        )
-                        embedVar4.title = data["items"][3]["snippet"]["title"]
-                        embedVar4.description = data["items"][3]["snippet"][
-                            "description"
-                        ]
-                        embedVar4.add_field(
-                            name="Channel",
-                            value=data["items"][3]["snippet"]["channelTitle"],
-                            inline=True,
-                        )
-                        embedVar4.add_field(
-                            name="Amount of Videos in Playlist",
-                            value=data["items"][3]["contentDetails"]["itemCount"],
-                            inline=True,
-                        )
-                        embedVar4.set_image(
-                            url=data["items"][3]["snippet"]["thumbnails"]["maxres"][
-                                "url"
-                            ]
-                        )
-                        await ctx.send(embed=embedVar4)
-                        embedVar5 = discord.Embed(
-                            color=discord.Color.from_rgb(242, 224, 255)
-                        )
-                        embedVar5.title = data["items"][4]["snippet"]["title"]
-                        embedVar5.description = data["items"][4]["snippet"][
-                            "description"
-                        ]
-                        embedVar5.add_field(
-                            name="Channel",
-                            value=data["items"][4]["snippet"]["channelTitle"],
-                            inline=True,
-                        )
-                        embedVar5.add_field(
-                            name="Amount of Videos in Playlist",
-                            value=data["items"][4]["contentDetails"]["itemCount"],
-                            inline=True,
-                        )
-                        embedVar5.set_image(
-                            url=data["items"][4]["snippet"]["thumbnails"]["maxres"][
-                                "url"
-                            ]
-                        )
-                        await ctx.send(embed=embedVar5)
+                        filterList = ["localized", "kind", "etag", "contentDetails", "snippet", "id"]
+                        snippetList = ["thumbnails", "localized", "title", "description"]
+                        videoFilter = ["default", "medium", "high", "standard"]
+                        for dictItems in data["items"]:
+                            for k, v in dictItems.items():
+                                if k not in filterList:
+                                    embedVar.add_field(name=k, value=v, inline=True)
+                                    embedVar.remove_field(3)
+
+                            for keys, val in dictItems["snippet"].items():
+                                if keys not in snippetList:
+                                    embedVar.add_field(name=keys, value=val, inline=True)
+                                    embedVar.remove_field(3)
+
+                            for item, res in dictItems["snippet"]["thumbnails"].items():
+                                if item not in videoFilter:
+                                    embedVar.set_image(url=res["url"])
+                                    
+                            embedVar.title = dictItems["snippet"]["title"]
+                            embedVar.description = dictItems["snippet"]["description"]
+                                
+                            await ctx.respond(embed=embedVar)
+                            
+                            
                     except Exception as e:
                         embedError = discord.Embed()
                         embedError.description = (
-                            f"No results found for {search}. Please try again..."
+                            f"No results found for {channel_name}. Please try again..."
                         )
                         embedError.add_field(
                             name="Error", value=e, inline=True)
-                        await ctx.send(embed=embedError)
-
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
-
-    @youtube_playlists.error
-    async def on_message_error(
-        self, ctx: commands.Context, error: commands.CommandError
-    ):
-        if isinstance(error, commands.MissingRequiredArgument):
-            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
-            embedVar.description = f"Missing a requireed argument: {error.param}"
-            msg = await ctx.send(embed=embedVar, delete_after=10)
-            await msg.delete(delay=10)
+                        await ctx.respond(embed=embedError)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
@@ -338,9 +208,9 @@ class YoutubeV3(commands.Cog):
 class YoutubeV4(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
-
-    @commands.command(name="youtube-comments", aliases=["yt-comments"])
-    async def youtube_comments(self, ctx, *, vid_id: str):
+        
+    @slash_command(name="youtube-comments", description="Returns up to 5 comments within a given video", guild_ids=[866199405090308116])
+    async def youtube_comments(self, ctx, *, vid_id: Option(str, "YT Video ID")):
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
             params = {
                 "key": YouTube_API_Key,
@@ -365,217 +235,57 @@ class YoutubeV4(commands.Cog):
                             value=data["error"]["errors"][0]["reason"],
                             inline=True,
                         )
-                        await ctx.send(embed=embedVar)
+                        await ctx.respond(embed=embedVar)
                     else:
-                        embedVar1 = discord.Embed(
+                        embedVar = discord.Embed(
                             color=discord.Color.from_rgb(255, 125, 125)
                         )
-                        embedVar1.title = data["items"][0]["snippet"][
-                            "topLevelComment"
-                        ]["snippet"]["authorDisplayName"]
-                        embedVar1.description = data["items"][0]["snippet"][
-                            "topLevelComment"
-                        ]["snippet"]["textOriginal"]
-                        embedVar1.add_field(
-                            name="Like Count",
-                            value=data["items"][0]["snippet"]["topLevelComment"][
-                                "snippet"
-                            ]["likeCount"],
-                            inline=True,
-                        )
-                        embedVar1.add_field(
-                            name="Published Date",
-                            value=data["items"][0]["snippet"]["topLevelComment"][
-                                "snippet"
-                            ]["publishedAt"],
-                            inline=True,
-                        )
-                        embedVar1.add_field(
-                            name="Updated Date",
-                            value=data["items"][0]["snippet"]["topLevelComment"][
-                                "snippet"
-                            ]["updatedAt"],
-                            inline=True,
-                        )
-                        embedVar1.set_thumbnail(
-                            url=data["items"][0]["snippet"]["topLevelComment"][
-                                "snippet"
-                            ]["authorProfileImageUrl"]
-                        )
-                        await ctx.send(embed=embedVar1)
-                        embedVar2 = discord.Embed(
-                            color=discord.Color.from_rgb(255, 253, 125)
-                        )
-                        embedVar2.title = data["items"][1]["snippet"][
-                            "topLevelComment"
-                        ]["snippet"]["authorDisplayName"]
-                        embedVar2.description = data["items"][1]["snippet"][
-                            "topLevelComment"
-                        ]["snippet"]["textOriginal"]
-                        embedVar2.add_field(
-                            name="Like Count",
-                            value=data["items"][1]["snippet"]["topLevelComment"][
-                                "snippet"
-                            ]["likeCount"],
-                            inline=True,
-                        )
-                        embedVar2.add_field(
-                            name="Published Date",
-                            value=data["items"][1]["snippet"]["topLevelComment"][
-                                "snippet"
-                            ]["publishedAt"],
-                            inline=True,
-                        )
-                        embedVar2.add_field(
-                            name="Updated Date",
-                            value=data["items"][1]["snippet"]["topLevelComment"][
-                                "snippet"
-                            ]["updatedAt"],
-                            inline=True,
-                        )
-                        embedVar2.set_thumbnail(
-                            url=data["items"][1]["snippet"]["topLevelComment"][
-                                "snippet"
-                            ]["authorProfileImageUrl"]
-                        )
-                        await ctx.send(embed=embedVar2)
-                        embedVar3 = discord.Embed(
-                            color=discord.Color.from_rgb(129, 255, 125)
-                        )
-                        embedVar3.title = data["items"][2]["snippet"][
-                            "topLevelComment"
-                        ]["snippet"]["authorDisplayName"]
-                        embedVar3.description = data["items"][2]["snippet"][
-                            "topLevelComment"
-                        ]["snippet"]["textOriginal"]
-                        embedVar3.add_field(
-                            name="Like Count",
-                            value=data["items"][2]["snippet"]["topLevelComment"][
-                                "snippet"
-                            ]["likeCount"],
-                            inline=True,
-                        )
-                        embedVar3.add_field(
-                            name="Published Date",
-                            value=data["items"][2]["snippet"]["topLevelComment"][
-                                "snippet"
-                            ]["publishedAt"],
-                            inline=True,
-                        )
-                        embedVar3.add_field(
-                            name="Updated Date",
-                            value=data["items"][2]["snippet"]["topLevelComment"][
-                                "snippet"
-                            ]["updatedAt"],
-                            inline=True,
-                        )
-                        embedVar3.set_thumbnail(
-                            url=data["items"][2]["snippet"]["topLevelComment"][
-                                "snippet"
-                            ]["authorProfileImageUrl"]
-                        )
-                        await ctx.send(embed=embedVar3)
-                        embedVar4 = discord.Embed(
-                            color=discord.Color.from_rgb(125, 255, 244)
-                        )
-                        embedVar4.title = data["items"][3]["snippet"][
-                            "topLevelComment"
-                        ]["snippet"]["authorDisplayName"]
-                        embedVar4.description = data["items"][3]["snippet"][
-                            "topLevelComment"
-                        ]["snippet"]["textOriginal"]
-                        embedVar4.add_field(
-                            name="Like Count",
-                            value=data["items"][3]["snippet"]["topLevelComment"][
-                                "snippet"
-                            ]["likeCount"],
-                            inline=True,
-                        )
-                        embedVar4.add_field(
-                            name="Published Date",
-                            value=data["items"][3]["snippet"]["topLevelComment"][
-                                "snippet"
-                            ]["publishedAt"],
-                            inline=True,
-                        )
-                        embedVar4.add_field(
-                            name="Updated Date",
-                            value=data["items"][3]["snippet"]["topLevelComment"][
-                                "snippet"
-                            ]["updatedAt"],
-                            inline=True,
-                        )
-                        embedVar4.set_thumbnail(
-                            url=data["items"][3]["snippet"]["topLevelComment"][
-                                "snippet"
-                            ]["authorProfileImageUrl"]
-                        )
-                        await ctx.send(embed=embedVar4)
-                        embedVar5 = discord.Embed(
-                            color=discord.Color.from_rgb(160, 125, 255)
-                        )
-                        embedVar5.title = data["items"][4]["snippet"][
-                            "topLevelComment"
-                        ]["snippet"]["authorDisplayName"]
-                        embedVar5.description = data["items"][4]["snippet"][
-                            "topLevelComment"
-                        ]["snippet"]["textOriginal"]
-                        embedVar5.add_field(
-                            name="Like Count",
-                            value=data["items"][4]["snippet"]["topLevelComment"][
-                                "snippet"
-                            ]["likeCount"],
-                            inline=True,
-                        )
-                        embedVar5.add_field(
-                            name="Published Date",
-                            value=data["items"][4]["snippet"]["topLevelComment"][
-                                "snippet"
-                            ]["publishedAt"],
-                            inline=True,
-                        )
-                        embedVar5.add_field(
-                            name="Updated Date",
-                            value=data["items"][4]["snippet"]["topLevelComment"][
-                                "snippet"
-                            ]["updatedAt"],
-                            inline=True,
-                        )
-                        embedVar5.set_thumbnail(
-                            url=data["items"][4]["snippet"]["topLevelComment"][
-                                "snippet"
-                            ]["authorProfileImageUrl"]
-                        )
-                        await ctx.send(embed=embedVar5)
+                        snippetFilter = ["topLevelComment", "videoId"]
+                        topLevelCommentFilter = ["authorChannelId", "authorProfileImageUrl", "textOriginal",
+                                                 "textDisplay", "videoId", "authorDisplayName", "viewerRating", "canRate", "id", "authorChannelUrl", "videoId"]
+                        pfpFilter = ["videoId", "textDisplay", "textOriginal", "authorDisplayName", "authorChannelId",
+                                     "canRate", "viewerRating", "likeCount", "publishedAt", "updatedAt",
+                                     "authorChannelUrl"]
+
+                        for dictVal in data["items"]:
+                            embedVar.title = dictVal["snippet"]["topLevelComment"]["snippet"]["authorDisplayName"]
+                            embedVar.description = dictVal["snippet"]["topLevelComment"]["snippet"]["textDisplay"]
+                                    
+
+                            for k, v in dictVal["snippet"].items():
+                                if k not in snippetFilter:
+                                    embedVar.add_field(name=k, value=v, inline=True)
+                                    embedVar.remove_field(6)
+
+                            for key, res in dictVal["snippet"]["topLevelComment"]["snippet"].items():
+                                if key not in topLevelCommentFilter:
+                                    embedVar.add_field(name=key, value=res, inline=True)
+                                    embedVar.remove_field(6)
+
+                            for item, img in dictVal["snippet"]["topLevelComment"]["snippet"].items():
+                                if item not in pfpFilter:
+                                    embedVar.set_thumbnail(url=img)
+                                    
+                                    
+                            await ctx.respond(embed=embedVar)
                 except Exception as e:
                     embedError = discord.Embed()
                     embedError.description = (
                         "Sorry, there seemed to be an error. Please try again..."
                     )
                     embedError.add_field(name="Error", value=e, inline=True)
-                    await ctx.send(embed=embedError)
+                    await ctx.respond(embed=embedError)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
-    @youtube_comments.error
-    async def on_message_error(
-        self, ctx: commands.Context, error: commands.CommandError
-    ):
-        if isinstance(error, commands.MissingRequiredArgument):
-            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
-            embedVar.description = f"Missing a requireed argument: {error.param}"
-            msg = await ctx.send(embed=embedVar, delete_after=10)
-            await msg.delete(delay=10)
-
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
 
 class YoutubeV5(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
 
-    @commands.command(name="youtube-video", aliases=["yt-video"])
-    async def youtube_video(self, ctx, *, video_id: str):
+    @slash_command(name="youtube-video", description="Provides info about the given video", guild_ids=[866199405090308116])
+    async def youtube_video(self, ctx, *, video_id: Option(str, "YT Video ID")):
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
             params = {
                 "key": YouTube_API_Key,
@@ -590,58 +300,30 @@ class YoutubeV5(commands.Cog):
                 try:
                     embed = discord.Embed(
                         color=discord.Color.from_rgb(255, 0, 0))
-                    embed.title = data["items"][0]["snippet"]["title"]
-                    embed.description = data["items"][0]["snippet"]["description"]
-                    embed.add_field(
-                        name="Channel",
-                        value=data["items"][0]["snippet"]["channelTitle"],
-                        inline=True,
-                    )
-                    embed.add_field(
-                        name="Views",
-                        value=data["items"][0]["statistics"]["viewCount"],
-                        inline=True,
-                    )
-                    embed.add_field(
-                        name="Likes",
-                        value=data["items"][0]["statistics"]["likeCount"],
-                        inline=True,
-                    )
-                    embed.add_field(
-                        name="Comments",
-                        value=data["items"][0]["statistics"]["commentCount"],
-                        inline=True,
-                    )
-                    embed.add_field(
-                        name="Favorite Count",
-                        value=data["items"][0]["statistics"]["favoriteCount"],
-                        inline=True,
-                    )
-                    embed.set_image(
-                        url=data["items"][0]["snippet"]["thumbnails"]["maxres"]["url"]
-                    )
-                    await ctx.send(embed=embed)
+                    snippetFilter = ["title", "description", "thumbnails", "localized"]
+                    picFilter = ["default", "medium", "high", "standard"]
+                    for items in data["items"]:
+                        for keys, val in items["snippet"].items():
+                            if keys not in snippetFilter:
+                                embed.add_field(name=keys, value=val, inline=True)
+                        embed.title = items["snippet"]["title"]
+                        embed.description = items["snippet"]["description"]
+                        for key, value in items["statistics"].items():
+                            embed.add_field(name=key, value=value, inline=True)
+                        for k, v in items["snippet"]["thumbnails"].items():
+                            if k not in picFilter:
+                                embed.set_image(url=v["url"])
+                    await ctx.respond(embed=embed)
                 except Exception as e:
                     embedError = discord.Embed()
                     embedError.description = (
                         "Sorry, there seemed to be an error. Please try again..."
                     )
                     embedError.add_field(name="Error", value=e, inline=True)
-                    await ctx.send(embed=embedError)
+                    await ctx.respond(embed=embedError)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
-    @youtube_video.error
-    async def on_message_error(
-        self, ctx: commands.Context, error: commands.CommandError
-    ):
-        if isinstance(error, commands.MissingRequiredArgument):
-            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
-            embedVar.description = f"Missing a requireed argument: {error.param}"
-            msg = await ctx.send(embed=embedVar, delete_after=10)
-            await msg.delete(delay=10)
-
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
 
 def setup(bot):
-- 
2.35.1

