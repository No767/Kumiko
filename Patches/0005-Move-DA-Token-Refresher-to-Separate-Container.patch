From 2c1c0e6723409d9d47634543be2e25bc84b4c061 Mon Sep 17 00:00:00 2001
From: No767 <73260931+No767@users.noreply.github.com>
Date: Sun, 23 Jan 2022 22:48:58 -0800
Subject: [PATCH 5/6] Move DA-Token-Refresher to Separate Container

The DA-Token-Refresher will not be use within Rin, but will be running as a separate docker container. This way we can still refresh the tokens even tho it is broken on Rin
---
 Bot/Cogs/deviantart-token-refresher.py | 83 ++++++++++++++------------
 Bot/Cogs/deviantart.py                 | 40 ++++++-------
 Bot/Cogs/uptime.py                     |  2 +-
 Bot/Cogs/version.py                    |  2 +-
 Bot/rinbot.py                          |  7 +--
 changelog.md                           |  6 +-
 6 files changed, 74 insertions(+), 66 deletions(-)

diff --git a/Bot/Cogs/deviantart-token-refresher.py b/Bot/Cogs/deviantart-token-refresher.py
index 9989b05..a6afc12 100644
--- a/Bot/Cogs/deviantart-token-refresher.py
+++ b/Bot/Cogs/deviantart-token-refresher.py
@@ -1,9 +1,14 @@
+# Note that this cog is disabled since v1.4.4
+# This cog has been moved to a separate script
+# and docker container
+# The source code will still be here for people
+# to view it
+
 import asyncio
 import os
 
 import aiohttp
 import orjson
-import uvloop
 from discord.ext import commands, tasks
 from dotenv import load_dotenv
 from sqlalchemy import Column, MetaData, String, Table
@@ -17,51 +22,55 @@ Password = os.getenv("Postgres_Password")
 Server_IP = os.getenv("Postgres_Server_IP")
 Username = os.getenv("Postgres_Username")
 
+class tokenRefresherUtils:
+    def __init__(self):
+        self.self = self
 
-async def select_values():
-    meta = MetaData()
-    engine = create_async_engine(
-        f"postgresql+asyncpg://{Username}:{Password}@{Server_IP}:5432/rin-deviantart-tokens"
-    )
-    tokens = Table(
-        "DA_Tokens",
-        meta,
-        Column("Access_Tokens", String),
-        Column("Refresh_Tokens", String),
-    )
-    async with engine.connect() as conn:
-        s = tokens.select()
-        result_select = await conn.execute(s)
-        for row in result_select:
-            return row
+    async def get(self):
+        meta = MetaData()
+        engine = create_async_engine(
+            f"postgresql+asyncpg://{Username}:{Password}@{Server_IP}:5432/rin-deviantart-tokens"
+        )
+        tokens = Table(
+            "deviantart-tokens",
+            meta,
+            Column("Access_Tokens", String),
+            Column("Refresh_Tokens", String),
+        )
+        async with engine.connect() as conn:
+            s = tokens.select()
+            result_select = await conn.execute(s)
+            for row in result_select:
+                return row
+            
+    async def update_values(self, Access_Token, Refresh_Token):
+        meta = MetaData()
+        engine2 = create_async_engine(
+            f"postgresql+asyncpg://{Username}:{Password}@{Server_IP}:5432/rin-deviantart-tokens"
+        )
+        tokens = Table(
+            "deviantart-tokens",
+            meta,
+            Column("Access_Tokens", String),
+            Column("Refresh_Tokens", String),
+        )
+        async with engine2.begin() as conn2:
+            update = tokens.update().values(
+                Access_Tokens=f"{Access_Token}", Refresh_Tokens=f"{Refresh_Token}"
+            )
+            await conn2.execute(update)
 
 
-async def update_values(Access_Token, Refresh_Token):
-    meta = MetaData()
-    engine2 = create_async_engine(
-        f"postgresql+asyncpg://{Username}:{Password}@{Server_IP}:5432/rin-deviantart-tokens"
-    )
-    tokens = Table(
-        "DA_Tokens",
-        meta,
-        Column("Access_Tokens", String),
-        Column("Refresh_Tokens", String),
-    )
-    async with engine2.begin() as conn2:
-        update = tokens.update().values(
-            Access_Tokens=f"{Access_Token}", Refresh_Tokens=f"{Refresh_Token}"
-        )
-        await conn2.execute(update)
 
 
 class tokenRefresher(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
-        self.refresher.start()
 
     @tasks.loop()
     async def refresher(self):
-        values = await select_values()
+        tokens = tokenRefresherUtils()
+        values = await tokens.get()
         Refresh_Token_Select = values[1]
         await asyncio.sleep(3300)
         async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
@@ -75,11 +84,11 @@ class tokenRefresher(commands.Cog):
                 "https://www.deviantart.com/oauth2/token", params=params
             ) as r:
                 data = await r.json()
+                print(data)
                 Access_token = data["access_token"]
                 Refresh_token = data["refresh_token"]
-                await update_values(Access_token, Refresh_token)
+                await tokens.update_values(Access_token, Refresh_token)
 
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
 
 def setup(bot):
diff --git a/Bot/Cogs/deviantart.py b/Bot/Cogs/deviantart.py
index 14954bd..ce5c098 100644
--- a/Bot/Cogs/deviantart.py
+++ b/Bot/Cogs/deviantart.py
@@ -7,6 +7,8 @@ from discord.ext import commands
 from dotenv import load_dotenv
 from sqlalchemy import Column, MetaData, String, Table
 from sqlalchemy.ext.asyncio import create_async_engine
+import asyncio
+import uvloop
 
 load_dotenv()
 
@@ -126,6 +128,8 @@ class DeviantArtV1(commands.Cog):
                     )
                     await ctx.send(embed=embedVar)
 
+    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
+
     @da.error
     async def on_message_error(
         self, ctx: commands.Context, error: commands.CommandError
@@ -136,10 +140,7 @@ class DeviantArtV1(commands.Cog):
             msg = await ctx.send(embed=embedVar, delete_after=10)
             await msg.delete(delay=10)
 
-    @da.before_invoke
-    async def before_command(self, ctx=None):
-        token = tokenFetcher()
-        await token.get()
+    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
 
 class DeviantArtV2(commands.Cog):
@@ -391,6 +392,8 @@ class DeviantArtV2(commands.Cog):
                         name="Status", value=art["status"], inline=True)
                     await ctx.send(embed=embedVar)
 
+    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
+    
     @da_query.error
     async def on_message_error(
         self, ctx: commands.Context, error: commands.CommandError
@@ -401,10 +404,7 @@ class DeviantArtV2(commands.Cog):
             msg = await ctx.send(embed=embedVar, delete_after=10)
             await msg.delete(delay=10)
 
-    @da_query.before_invoke
-    async def on_command(self, ctx=None):
-        token = tokenFetcher()
-        await token.get()
+    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
 
 class DeviantArtV3(commands.Cog):
@@ -656,6 +656,8 @@ class DeviantArtV3(commands.Cog):
                         name="Status", value=pop["status"], inline=True)
                     await ctx.send(embed=embedVar)
 
+    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
+
     @deviantart_popular.error
     async def on_message_error(
         self, ctx: commands.Context, error: commands.CommandError
@@ -666,10 +668,8 @@ class DeviantArtV3(commands.Cog):
             msg = await ctx.send(embed=embedVar, delete_after=10)
             await msg.delete(delay=10)
 
-    @deviantart_popular.before_invoke
-    async def on_command(self, ctx=None):
-        token = tokenFetcher()
-        await token.get()
+    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
+
 
 
 class DeviantArtV4(commands.Cog):
@@ -916,6 +916,8 @@ class DeviantArtV4(commands.Cog):
                         name="Status", value=tags["status"], inline=True)
                     await ctx.send(embed=embedVar)
 
+    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
+    
     @tags.error
     async def on_message_error(
         self, ctx: commands.Context, error: commands.CommandError
@@ -926,10 +928,8 @@ class DeviantArtV4(commands.Cog):
             msg = await ctx.send(embed=embedVar, delete_after=10)
             await msg.delete(delay=10)
 
-    @tags.before_invoke
-    async def on_command(self, ctx=None):
-        token = tokenFetcher()
-        await token.get()
+    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
+
 
 
 class DeviantArtV5(commands.Cog):
@@ -1026,6 +1026,8 @@ class DeviantArtV5(commands.Cog):
                     embedVar.add_field(name="Reason", value=e, inline=False)
                     await ctx.send(embed=embedVar)
 
+    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
+
     @user.error
     async def on_message_error(
         self, ctx: commands.Context, error: commands.CommandError
@@ -1036,10 +1038,8 @@ class DeviantArtV5(commands.Cog):
             msg = await ctx.send(embed=embedVar, delete_after=10)
             await msg.delete(delay=10)
 
-    @user.before_invoke
-    async def on_command(self, ctx=None):
-        token = tokenFetcher()
-        await token.get()
+    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
+
 
 
 def setup(bot):
diff --git a/Bot/Cogs/uptime.py b/Bot/Cogs/uptime.py
index aa4ae5e..fd5bd7b 100644
--- a/Bot/Cogs/uptime.py
+++ b/Bot/Cogs/uptime.py
@@ -21,7 +21,7 @@ class UptimeV1(commands.Cog):
         uptime = datetime.timedelta(
             seconds=int(round(time.time() - startTime)))
         embed = discord.Embed(color=discord.Color.from_rgb(245, 227, 255))
-        embed.description = f"Rin's Uptime: `{uptime.days} Days, {uptime.seconds//3600} Hours, {(uptime.seconds//60)%60} Minutes`"
+        embed.description = f"Rin's Uptime: `{uptime.days} Days, {uptime.seconds//3600} Hours, {(uptime.seconds//60)%60} Minutes, {(uptime.seconds%60)} Seconds`"
         await ctx.send(embed=embed)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
diff --git a/Bot/Cogs/version.py b/Bot/Cogs/version.py
index 0774553..caab931 100644
--- a/Bot/Cogs/version.py
+++ b/Bot/Cogs/version.py
@@ -12,7 +12,7 @@ class VersionV1(commands.Cog):
     @commands.command(name="version")
     async def version(self, ctx):
         embedVar = discord.Embed()
-        embedVar.description = "Build Version: v1.4.3"
+        embedVar.description = "Build Version: v1.4.4"
         await ctx.send(embed=embedVar)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
diff --git a/Bot/rinbot.py b/Bot/rinbot.py
index ec999a8..b154781 100644
--- a/Bot/rinbot.py
+++ b/Bot/rinbot.py
@@ -6,7 +6,7 @@ from dotenv import load_dotenv
 
 # Grabs the bot's token from the .env file
 load_dotenv()
-TOKEN = os.getenv("TOKEN")
+TOKEN = os.getenv("Hanako_Token")
 intents = Intents.all()
 bot = commands.Bot(command_prefix=".", help_command=None)
 
@@ -39,9 +39,8 @@ initial_extensions = [
     "Cogs.tenor",
     "Cogs.uptime",
     "Cogs.mangadex",
-    "Cogs.deviantart",
-    "Cogs.disquest",
-    "Cogs.deviantart-token-refresher",
+    "Cogs.deviantart"
+    
 ]
 for extension in initial_extensions:
     bot.load_extension(extension)
diff --git a/changelog.md b/changelog.md
index 3068a38..6cbb6e2 100644
--- a/changelog.md
+++ b/changelog.md
@@ -1,6 +1,6 @@
 # TD;LR
-- Fix DeviantArt Token Refresher (the insert would not make it through)
+- Move DeviantArt Token Refresher to a separate script and docker container (This should fix it)
 
 # Changes
-- Fix DeviantArt Token Refresher (the insert would not make it through)
-- Update Docker Image to Python 3.10.2
+- Add seconds counter for uptime cog
+- Move DeviantArt Token Refresher to a separate script and docker container (This should fix it)
-- 
2.34.1

