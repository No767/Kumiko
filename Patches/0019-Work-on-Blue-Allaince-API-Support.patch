From a8d403790283e37197197f82b473fdcb6d8a51df Mon Sep 17 00:00:00 2001
From: No767 <73260931+No767@users.noreply.github.com>
Date: Sun, 24 Apr 2022 17:03:06 -0700
Subject: [PATCH] Work on Blue Allaince API Support

---
 Bot/Cogs/blue-alliance.py | 119 +++++++++++++++++++++++++++++++++++++-
 Bot/Cogs/reddit.py        |   7 ---
 Bot/rinbot.py             |   1 +
 Pipfile                   |   1 +
 Pipfile.lock              |  14 ++++-
 5 files changed, 132 insertions(+), 10 deletions(-)

diff --git a/Bot/Cogs/blue-alliance.py b/Bot/Cogs/blue-alliance.py
index 00d2b08..622f3e5 100644
--- a/Bot/Cogs/blue-alliance.py
+++ b/Bot/Cogs/blue-alliance.py
@@ -8,11 +8,12 @@ import uvloop
 from discord.commands import Option, slash_command
 from discord.ext import commands
 from dotenv import load_dotenv
+import simdjson
 
 load_dotenv()
 
 apiKey = os.getenv("Blue_Alliance_API_Key")
-
+parser = simdjson.Parser()
 
 class BlueAllianceV1(commands.Cog):
     def __init__(self, bot):
@@ -33,7 +34,7 @@ class BlueAllianceV1(commands.Cog):
                 headers=headers,
             ) as r:
                 data = await r.content.read()
-                dataMain = orjson.loads(data)
+                dataMain = parser.parse(data, recursive=True)
                 embed = discord.Embed()
                 embedError = discord.Embed()
                 mainFilter = ["nickname", "team_number"]
@@ -41,6 +42,7 @@ class BlueAllianceV1(commands.Cog):
                     for key, value in dataMain.items():
                         if key not in mainFilter:
                             embed.add_field(name=key, value=value, inline=True)
+                            embed.remove_field(-24)
                     embed.title = f"{dataMain['team_number']} - {dataMain['nickname']}"
                     await ctx.respond(embed=embed)
                 except Exception as e:
@@ -52,6 +54,119 @@ class BlueAllianceV1(commands.Cog):
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
+class BlueAllianceV2(commands.Cog):
+    def __init__(self, bot):
+        self.bot = bot
+        
+    @slash_command(name="blue-alliance-team-events", description="Return what events an FRC team has attended", guild_ids=[866199405090308116])
+    async def blueAllianceTeamEvents(self, ctx, *, team_number: Option(int, "The FRC team number")):
+        async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
+            headers = {"X-TBA-Auth-Key": apiKey}
+            async with session.get(
+                f"https://www.thebluealliance.com/api/v3/team/frc{team_number}/events",
+                headers=headers,
+            ) as r:
+                data2 = await r.content.read()
+                dataMain2 = parser.parse(data2, recursive=True)
+                embed = discord.Embed()
+                embedError = discord.Embed()
+                filterMain = ["gmaps_place_id", "name", "webcasts"]
+                try:
+                    for dictItem2 in dataMain2:
+                        for key, value in dictItem2.items():
+                            if key not in filterMain:
+                                embed.add_field(name=key, value=f"[{value}]", inline=True)
+                                embed.remove_field(-24)
+                        embed.title = dictItem2["name"]
+                        await ctx.respond(embed=embed)
+                except Exception as e:
+                    embedError.description = (
+                        "Oops, something went wrong. Please try again..."
+                    )
+                    embedError.add_field(name="Reason", value=e, inline=True)
+                    await ctx.respond(embed=embedError)
+    
+class BlueAllianceV3(commands.Cog):
+    def __init__(self, bot):
+        self.bot = bot
+        
+    @slash_command(name="blue-alliance-team-matches-info", description="Returns the general info for each match that a team was in during the given event", guild_ids=[866199405090308116])
+    async def blueAllianceTeamMatches(self, ctx, *, team_number: Option(int, "The FRC team number"), event_key: Option(str, "The event key")):
+        async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
+            headers = {"X-TBA-Auth-Key": apiKey}
+            async with session.get(
+                f"https://www.thebluealliance.com/api/v3/team/frc{team_number}/event/{event_key}/matches",
+                headers=headers,
+            ) as r:
+                data = await r.content.read()
+                dataMain = parser.parse(data, recursive=True)
+                embed = discord.Embed()
+                embedError = discord.Embed()
+                filter = ["score_breakdown", "alliances", "videos", "match_number"] 
+                try:
+                    for dictItem in dataMain:
+                        for key, value in dictItem.items():
+                            if key not in filter:
+                                embed.add_field(name=key, value=value, inline=True)
+                        for k, v in dictItem["alliances"]["blue"].items():
+                            embed.add_field(name=k, value=v, inline=True)
+                        for item, res in dictItem["alliances"]["red"].items():
+                            embed.add_field(name=item, value=res, inline=True)
+                        embed.title = f"Match {dictItem['match_number']}"
+                        await ctx.respond(embed=embed)
+                except Exception as e:
+                    embedError.description = (
+                        "Oops, something went wrong. Please try again..."
+                    )
+                    embedError.add_field(name="Reason", value=e, inline=True)
+                    await ctx.respond(embed=embedError)
+
+class BlueAllianceV4(commands.Cog):
+    def __init__(self, bot):
+        self.bot = bot
+        
+    @slash_command(name="blue-alliance-team-match-breakdown", description="Returns the breakdown of a team's match", guild_ids=[866199405090308116])
+    async def blueAllianceBreakdown(self, ctx, *, frc_team_number: Option(int, "The FRC team number"), frc_event_key: Option(str, "The event key")):
+        async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
+            headers = {"X-TBA-Auth-Key": apiKey}
+            async with session.get(f"https://www.thebluealliance.com/api/v3/team/frc{frc_team_number}/event/{frc_event_key}/matches",
+                                   headers=headers) as r:
+                data = await r.content.read()
+                dataMain = parser.parse(data, recursive=True)
+                embed = discord.Embed()
+                for dictItem in dataMain:
+                    for keys, value in dictItem["score_breakdown"]["blue"].items():
+                        embed.add_field(name=keys, value=value, inline=True)
+                    for k, v in dictItem["score_breakdown"]["red"].items():
+                        embed.add_field(name=k, value=v, inline=True)
+                    embed.title = f"Match {dictItem['match_number']}"
+                    await ctx.respond(embed=embed)
 
+class BlueAllianceV5(commands.Cog):
+    def __init__(self, bot):
+        self.bot = bot
+        
+    @slash_command(name="blue-alliance-event-rankings", description="Returns the event ranking", guild_ids=[866199405090308116])
+    async def blueAllianceEventRankings(self, ctx, *, frc_event_key: Option(str, "The event key")):
+        async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
+            headers = {"X-TBA-Auth-Key": apiKey}
+            async with session.get(f"https://www.thebluealliance.com/api/v3/event/{frc_event_key}/rankings",
+                                   headers=headers) as r:
+                data = await r.content.read()
+                dataMain = parser.parse(data, recursive=True)
+                embed = discord.Embed()
+                filter = ["rank", "record"]
+                for dictItem in dataMain["rankings"]:
+                    for keys, values in dictItem.items():
+                        if keys not in filter:
+                            embed.add_field(name=keys, value=values, inline=True)
+                    for k, v in dictItem["record"].items():
+                        embed.add_field(name=k, value=v, inline=True)
+                    embed.title = f"Rank {dictItem['rank']}"
+                    await ctx.respond(embed=embed)
 def setup(bot):
     bot.add_cog(BlueAllianceV1(bot))
+    bot.add_cog(BlueAllianceV2(bot))
+    bot.add_cog(BlueAllianceV3(bot))
+    # bot.add_cog(BlueAllianceV4(bot)) # having some issues rn for some reason. will fix later
+    bot.add_cog(BlueAllianceV5(bot))
diff --git a/Bot/Cogs/reddit.py b/Bot/Cogs/reddit.py
index e17061d..a588daf 100644
--- a/Bot/Cogs/reddit.py
+++ b/Bot/Cogs/reddit.py
@@ -209,14 +209,7 @@ class RedditV5(commands.Cog):
                 await comment.author.load()
                 embedVar.title = comment.author.name
                 embedVar.description = comment.body
-                embedVar.add_field(
-                    name="Score", value=comment.score, inline=True)
-                embedVar.add_field(
-                    name="Created UTC", value=comment.created_utc, inline=True
-                )
-                embedVar.add_field(name="ID", value=comment.id, inline=True)
                 embedVar.set_thumbnail(url=comment.author.icon_img)
-                embedVar.remove_field(1)
                 await ctx.respond(embed=embedVar)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
diff --git a/Bot/rinbot.py b/Bot/rinbot.py
index 8b83ccb..f581e0c 100644
--- a/Bot/rinbot.py
+++ b/Bot/rinbot.py
@@ -40,6 +40,7 @@ initial_extensions = [
     "Cogs.modrinth",
     "Cogs.discord-bots",
     "Cogs.first-frc-events",
+    "Cogs.blue-alliance"
 ]
 for extension in initial_extensions:
     bot.load_extension(extension)
diff --git a/Pipfile b/Pipfile
index 00e0d2b..d3394ad 100644
--- a/Pipfile
+++ b/Pipfile
@@ -20,6 +20,7 @@ cchardet = "*"
 beautifulsoup4 = "*"
 py-cord = {version = "==2.0.0b7", extras = ["voice"]}
 pysimdjson = "*"
+cysimdjson = "*"
 
 [dev-packages]
 black = "*"
diff --git a/Pipfile.lock b/Pipfile.lock
index 7aff8c5..adf3096 100644
--- a/Pipfile.lock
+++ b/Pipfile.lock
@@ -1,7 +1,7 @@
 {
     "_meta": {
         "hash": {
-            "sha256": "11d927d3592ff2c348a055721f661328c4e90e638e6e03e52eb85db65c682fd9"
+            "sha256": "11d1c93f7415a750685c0cc8e7d32330ea584fbeb034b31ddd50c029bd90091b"
         },
         "pipfile-spec": 6,
         "requires": {
@@ -385,6 +385,18 @@
             "markers": "python_version >= '3.5'",
             "version": "==2.0.12"
         },
+        "cysimdjson": {
+            "hashes": [
+                "sha256:452fb96cc3a7f60ab8130ae53309a9369d8389c42d847731638552cd39537e76",
+                "sha256:6790955528dc6177165ef977b938c82c3b148b9f01486430613da8770888c7e8",
+                "sha256:7c7ffea88d5e833e6e20b52821747632a3604d3f04f72266da0f817abf46ddf5",
+                "sha256:c5bbaa0544454c19dcb145397c55990dcb3b8bfdea54b9648dfcf3e6f9f45589",
+                "sha256:d04e64389371550339a4bc2bdd69579fe5393cba930c429ce42c56f57733baed",
+                "sha256:d571af7d6fca8cb77d1192970f1322c0e5346b957f94ed03d5414ec57d611d03"
+            ],
+            "index": "pypi",
+            "version": "==21.11"
+        },
         "frozenlist": {
             "hashes": [
                 "sha256:006d3595e7d4108a12025ddf415ae0f6c9e736e726a5db0183326fd191b14c5e",
-- 
2.36.0

