From 7377f617811f035bbf32aee6ef57967c169fc0b8 Mon Sep 17 00:00:00 2001
From: No767 <73260931+No767@users.noreply.github.com>
Date: Tue, 1 Feb 2022 15:44:56 -0800
Subject: [PATCH] Finish OpenAI/GPT-3 API Support

---
 Bot/Cogs/openai-gpt3.py | 137 ++++++++++++++++++++++++++++++++++++++--
 Bot/Cogs/rinhelp.py     |  26 ++++++++
 2 files changed, 157 insertions(+), 6 deletions(-)

diff --git a/Bot/Cogs/openai-gpt3.py b/Bot/Cogs/openai-gpt3.py
index 83c8f85..61b93a7 100644
--- a/Bot/Cogs/openai-gpt3.py
+++ b/Bot/Cogs/openai-gpt3.py
@@ -19,14 +19,14 @@ class OpenAI1(commands.Cog):
 
     @commands.command(name="openai-complete", aliases=["ai-complete"])
     async def openaiComplete(self, ctx, *, completion=None):
-        async with aiohttp.ClientSeession(json_serialize=ujson.dumps) as session:
+        async with aiohttp.ClientSession(json_serialize=ujson.dumps) as session:
             headers = {
                 "Authorization": f"Bearer {OpenAI_API_KEY}",
                 "Content-Type": "application/json",
             }
             payload = {
                 "prompt": f"{completion}",
-                "max_tokens": 32,
+                "max_tokens": 16,
                 "temperature": 0.35,
                 "top_p": 0.20,
             }
@@ -36,13 +36,138 @@ class OpenAI1(commands.Cog):
                 json=payload,
             ) as r:
                 data = await r.json()
-                embed = discord.Embed()
-                print(data)
-                embed.description = data["choices"]["text"]
-                await ctx.send(embed=embed)
+                try:
+                    embedVar = discord.Embed()
+                    embedVar.description = data["choices"][0]["text"]
+                    await ctx.send(embed=embedVar)
+                except Exception as e:
+                    embedVar = discord.Embed()
+                    embedVar.description = "The query was not successful."
+                    embedVar.add_field(name="Reason", value=e, inline=True)
+                    await ctx.send(embed=embedVar)
+
+    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
+
+    @openaiComplete.error
+    async def on_message_error(
+        self, ctx: commands.Context, error: commands.CommandError
+    ):
+        if isinstance(error, commands.MissingRequiredArgument):
+            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
+            embedVar.description = f"Missing a requireed argument: {error.param}"
+            msg = await ctx.send(embed=embedVar, delete_after=10)
+            await msg.delete(delay=10)
+
+    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
+            
+class OpenAI2(commands.Cog):
+    def __init__(self, bot):
+        self.bot = bot
+        
+    @commands.command(name="openai-classify", aliases=["ai-classify"])
+    async def openaiClassify(self, ctx):
+        def check(ms):
+            return (
+                ms.channel == ctx.message.channel
+                and ms.author == ctx.message.author
+            )
+        await ctx.send("Enter in query here:")
+        query1 = await self.bot.wait_for("message", check=check)
+        await ctx.send("Enter in an example in order to get classify:")
+        searchTerm1 = await self.bot.wait_for("message", check=check)
+        await ctx.send("Is the example above a negative example or positive example? (For example, I am sad would be considered negative):")
+        posOrNegExample1 = await self.bot.wait_for("message", check=check)
+        await ctx.send("Enter in another example:")
+        searchTerm2 = await self.bot.wait_for("message", check=check)
+        await ctx.send(
+            "Is the example above a negative example or positive example?:")
+        posOrNegExample2 = await self.bot.wait_for("message", check=check)
+        async with aiohttp.ClientSession(json_serialize=ujson.dumps) as session:
+            headers = {"Authorization": f"Bearer {OpenAI_API_KEY}", "Content-Type": "application/json"}
+            payload = {"query": f"{query1.content}", "search_model": "curie", "model": "curie", "examples": [[f"{searchTerm1.content}", f"{posOrNegExample1.content}"], [f"{searchTerm2.content}", f"{posOrNegExample2.content}"]]}
+            async with session.post("https://api.openai.com/v1/classifications", headers=headers, json=payload) as poster:
+                data = await poster.json()
+                try:
+                    embedVar = discord.Embed()
+                    embedVar.add_field(name="Label (Query)", value=data["label"], inline=True)
+                    embedVar.add_field(name="Label", value=data["selected_examples"][0]["label"], inline=True)
+                    embedVar.add_field(name="Text", value=data["selected_examples"][0]["text"], inline=True)
+                    embedVar.add_field(name="Label", value=data["selected_examples"][1]["label"], inline=True)
+                    embedVar.add_field(name="Text", value=data["selected_examples"][1]["text"], inline=True)
+                    await ctx.send(embed=embedVar)
+                except Exception as e:
+                    embedVar = discord.Embed()
+                    embedVar.description = "The query was not successful."
+                    embedVar.add_field(name="Reason", value=e, inline=True)
+                    await ctx.send(embed=embedVar)
+            
+    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
+
+    @openaiClassify.error
+    async def on_message_error(
+        self, ctx: commands.Context, error: commands.CommandError
+    ):
+        if isinstance(error, commands.MissingRequiredArgument):
+            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
+            embedVar.description = f"Missing a requireed argument: {error.param}"
+            msg = await ctx.send(embed=embedVar, delete_after=10)
+            await msg.delete(delay=10)
+
+    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
+
+class OpenAI3(commands.Cog):
+    def __init__(self, bot):
+        self.bot = bot
+        
+    @commands.command(name="openai-answers", aliases=["ai-answers"])
+    async def openaiAnswers(self, ctx):
+        def check(ms):
+            return (
+                ms.channel == ctx.message.channel
+                and ms.author == ctx.message.author
+            )
+
+        await ctx.send("Enter in question here:")
+        question1 = await self.bot.wait_for("message", check=check)
+        await ctx.send("Enter in an example question:")
+        exampleQuestion = await self.bot.wait_for("message", check=check)
+        await ctx.send("Enter the answer for the question you just sent:")
+        exampleAnswer = await self.bot.wait_for("message", check=check)
+        await ctx.send("Enter in some context for the questions you just wrote:")
+        context = await self.bot.wait_for("message", check=check)
+        async with aiohttp.ClientSession(json_serialize=ujson.dumps) as session:
+            headers = {"Authorization": f"Bearer {OpenAI_API_KEY}", "Content-Type": "application/json"}
+            payload = {"model": "ada", "question": question1.content,
+                       "examples": [[f"{exampleQuestion.content}", f"{exampleAnswer.content}"]],
+                       "examples_context": context.content, "documents": []}
+            async with session.post("https://api.openai.com/v1/answers", headers=headers, json=payload) as response:
+                data = await response.json()
+                try:
+                    embedVar = discord.Embed()
+                    embedVar.description = str(data["answers"]).replace("[", "").replace("]", "").replace("'", "")
+                    await ctx.send(embed=embedVar)
+                except Exception as e:
+                    embedVar = discord.Embed()
+                    embedVar.description = "The query was not successful."
+                    embedVar.add_field(name="Reason", value=e, inline=True)
+                    await ctx.send(embed=embedVar)
+                
+    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
+
+    @openaiAnswers.error
+    async def on_message_error(
+        self, ctx: commands.Context, error: commands.CommandError
+    ):
+        if isinstance(error, commands.MissingRequiredArgument):
+            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
+            embedVar.description = f"Missing a requireed argument: {error.param}"
+            msg = await ctx.send(embed=embedVar, delete_after=10)
+            await msg.delete(delay=10)
 
     asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
 
 
 def setup(bot):
     bot.add_cog(OpenAI1(bot))
+    bot.add_cog(OpenAI2(bot))
+    bot.add_cog(OpenAI3(bot))
diff --git a/Bot/Cogs/rinhelp.py b/Bot/Cogs/rinhelp.py
index 81acadf..4684405 100644
--- a/Bot/Cogs/rinhelp.py
+++ b/Bot/Cogs/rinhelp.py
@@ -57,6 +57,8 @@ class rinhelp(commands.Cog):
                 )
                 embedVar.add_field(
                     name="Tenor", value="`.rinhelp tenor`", inline=True)
+                embedVar.add_field(
+                    name="OpenAI", value="`.rinhelp openai`", inline=True)
                 embedVar.set_author(
                     name="Rin Help", icon_url=bot.user.avatar_url)
                 embedVar.set_footer(
@@ -514,6 +516,30 @@ class rinhelp(commands.Cog):
                     name="Rin Help - Tenor", icon_url=bot.user.avatar_url
                 )
                 await ctx.send(embed=embedVar)
+
+            if str(search) in ["openai", "ai", "gpt-3"]:
+                bot = self.bot
+                embedVar = discord.Embed(color=14414079)
+                embedVar.add_field(
+                    name="`openai-complete`",
+                    value="Completes a sentence using GPT-3",
+                    inline=True,
+                )
+                embedVar.add_field(
+                    name="`openai-classify`",
+                    value="Classifies a sentence into negative or positive (using AI)",
+                    inline=True,
+                )
+                embedVar.add_field(
+                    name="`openai-answers`",
+                    value="Generates answers written by AI for a given question",
+                    inline=True,
+                )
+                embedVar.set_author(
+                    name="Rin Help - OpenAI", icon_url=bot.user.avatar_url
+                )
+                await ctx.send(embed=embedVar)
+            
         except Exception as e:
             bot = self.bot
             embedVar = discord.Embed(title="Rin Help", color=14414079)
-- 
2.34.1

