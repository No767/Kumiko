From d305bf96368cc70692902df9049aec3d87703d24 Mon Sep 17 00:00:00 2001
From: No767 <73260931+No767@users.noreply.github.com>
Date: Sat, 26 Mar 2022 00:12:14 -0700
Subject: [PATCH] Add Discord Bots API Support

to be clear, it's discord.bots.gg api support
---
 Bot/Cogs/discord-bots.py | 76 ++++++++++++++++++++++++++++++++++++++++
 Bot/rinbot.py            |  1 +
 2 files changed, 77 insertions(+)
 create mode 100644 Bot/Cogs/discord-bots.py

diff --git a/Bot/Cogs/discord-bots.py b/Bot/Cogs/discord-bots.py
new file mode 100644
index 0000000..0a3430c
--- /dev/null
+++ b/Bot/Cogs/discord-bots.py
@@ -0,0 +1,76 @@
+import os
+import discord
+from discord.ext import commands
+from discord.commands import Option, slash_command
+import uvloop
+import orjson
+import aiohttp
+import asyncio
+
+from dotenv import load_dotenv
+
+load_dotenv()
+apiKey = os.getenv("Discord_Bots_API_Key")
+
+class DiscordBotsV1(commands.Cog):
+    def __init__(self, bot):
+        self.bot = bot
+        
+    @slash_command(name="discord-bots-search", description="Searches for any Discord Bots listed on discord.bots.gg", guild_ids=[866199405090308116])
+    async def discordBotsSearch(self, ctx, *, search: Option(str, "The bot that you wish to search for"), sort: Option(str, "Sorts the results via the given keys", choices=["username", "id", "guildcount", "library", "author"])):
+        async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
+            headers = {"Authorization": apiKey}
+            params = {"q": search, "sort": sort, "limit": 5}
+            async with session.get("https://discord.bots.gg/api/v1/bots", headers=headers, params=params) as r:
+                data = await r.content.read()
+                dataMain = orjson.loads(data)
+                filterMain = ["avatarURL", "coOwners", "shortDescription", "owner", "username"]
+                embedVar = discord.Embed()
+                try:
+                    for dictItem in dataMain["bots"]:
+                        for k, v in dictItem.items():
+                            if k not in filterMain:
+                                embedVar.add_field(name=k, value=v, inline=True)
+                        for keys, value in dictItem["owner"].items():
+                            embedVar.add_field(name=keys, value=value, inline=True)
+                        embedVar.title = dictItem["username"]
+                        embedVar.description = dictItem["shortDescription"]
+                        embedVar.set_thumbnail(url=dictItem["avatarURL"])
+                        await ctx.respond(embed=embedVar)
+                except Exception as e:
+                    print(dataMain)
+                    embedError = discord.Embed()
+                    embedError.description = "It seems like it didn't work... Please try again"
+                    embedError.add_field(name="Reason", value=e, inline=True)
+                    await ctx.respond(embed=embedError)
+                    
+    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
+    
+class DiscordBotsV2(commands.Cog):
+    def __init__(self, bot):
+        self.bot = bot
+        
+    @slash_command(name="discord-bots-id", description="Searches for any Discord Bots listed on discord.bots.gg via the Discord Bot's ID", guild_ids=[866199405090308116])
+    async def discordBotsID(self, ctx, *, id: Option(str, "The ID of the Discord Bot")):
+        async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
+            headers = {"Authorization": apiKey}
+            async with session.get(f"https://discord.bots.gg/api/v1/bots/{id}", headers=headers) as response:
+                data2 = await response.content.read()
+                dataMain2 = orjson.loads(data2)
+                embedVar = discord.Embed()
+                filterMain2 = ["coOwners", "avatarURL", "shortDescription", "owner", "username", "longDescription"]
+                for dictKey, dictVal in dataMain2.items():
+                    if dictKey not in filterMain2:
+                        embedVar.add_field(name=dictKey, value=dictVal, inline=True)
+                for dictKey1, dictVal1 in dataMain2["owner"].items():
+                    embedVar.add_field(name=dictKey1, value=dictVal1, inline=True)
+                embedVar.title = dataMain2["username"]
+                embedVar.description = f"{dataMain2['shortDescription']}\n\n{dataMain2['longDescription']}"
+                embedVar.set_thumbnail(url=dataMain2["avatarURL"])
+                await ctx.respond(embed=embedVar)
+    
+    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
+
+def setup(bot):
+    bot.add_cog(DiscordBotsV1(bot))
+    bot.add_cog(DiscordBotsV2(bot))
\ No newline at end of file
diff --git a/Bot/rinbot.py b/Bot/rinbot.py
index 077e7be..7630a8f 100644
--- a/Bot/rinbot.py
+++ b/Bot/rinbot.py
@@ -38,6 +38,7 @@ initial_extensions = [
     "Cogs.openai-gpt3",
     "Cogs.help",
     "Cogs.modrinth",
+    "Cogs.discord-bots",
 ]
 for extension in initial_extensions:
     bot.load_extension(extension)
-- 
2.35.1

