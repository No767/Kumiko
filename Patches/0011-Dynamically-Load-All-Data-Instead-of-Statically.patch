From 9734ec12fa9c049b3a6112a46bf7f6de43d9456c Mon Sep 17 00:00:00 2001
From: No767 <73260931+No767@users.noreply.github.com>
Date: Fri, 4 Feb 2022 21:52:26 -0800
Subject: [PATCH] Dynamically Load All Data Instead of Statically

Suggested by Isaac-To on No767/Kumiko#32, this should speed up loading the data by a lot
---
 Bot/Cogs/mcsrvstats.py | 511 ++++++++++++-----------------------------
 1 file changed, 149 insertions(+), 362 deletions(-)

diff --git a/Bot/Cogs/mcsrvstats.py b/Bot/Cogs/mcsrvstats.py
index 422ceb0..49b5220 100644
--- a/Bot/Cogs/mcsrvstats.py
+++ b/Bot/Cogs/mcsrvstats.py
@@ -1,362 +1,149 @@
-import asyncio
-
-import aiohttp
-import discord
-import orjson
-import uvloop
-from discord.ext import commands
-
-
-class mcsrvstats(commands.Cog):
-    def __init__(self, bot):
-        self.bot = bot
-
-    @commands.command(name="javamcsrv", aliases=["java"])
-    async def java(self, ctx, search: str):
-        async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
-            async with session.get(f"https://api.mcsrvstat.us/2/{search}") as r:
-                mcsrv = await r.json()
-                image_link = f"https://api.mcsrvstat.us/icon/{search}"
-                mcsrv_status_code = r.status
-                try:
-                    if str(mcsrv["online"]) == "True":
-                        embedVar = discord.Embed(
-                            title="Infomation (Java Edition)", color=0xC27C0E
-                        )
-                        embedVar.add_field(
-                            name="Online Status", value=mcsrv["online"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="Hostname/Domain", value=mcsrv["hostname"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="IP Address", value=mcsrv["ip"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="Port", value=mcsrv["port"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="Players Online",
-                            value=mcsrv["players"]["online"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Max Online Player Slots",
-                            value=mcsrv["players"]["max"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="MOTD",
-                            value=str(mcsrv["motd"]["clean"])
-                            .replace("[", "")
-                            .replace("]", "")
-                            .replace("'", ""),
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Ping", value=mcsrv["debug"]["ping"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="Query", value=mcsrv["debug"]["query"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="SRV Record", value=mcsrv["debug"]["srv"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="Query Mismatch",
-                            value=mcsrv["debug"]["querymismatch"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="IP in SRV",
-                            value=mcsrv["debug"]["ipinsrv"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="CNAME in SRV",
-                            value=mcsrv["debug"]["cnameinsrv"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Animated MOTD",
-                            value=mcsrv["debug"]["animatedmotd"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Cache Time",
-                            value=mcsrv["debug"]["cachetime"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="API Version",
-                            value=mcsrv["debug"]["apiversion"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="HTTP Status (MCSrvStat)",
-                            value=mcsrv_status_code,
-                            inline=True,
-                        )
-                        embedVar.set_thumbnail(url=image_link)
-                        await ctx.send(embed=embedVar)
-                    else:
-                        embedVar = discord.Embed(
-                            title="Infomation (Java Edition)", color=0xC27C0E
-                        )
-                        embedVar.add_field(
-                            name="Online Status", value=mcsrv["online"])
-                        embedVar.add_field(
-                            name="Hostname/Domain", value=mcsrv["hostname"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="IP Address", value=mcsrv["ip"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="Port", value=mcsrv["port"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="Ping", value=mcsrv["debug"]["ping"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="Query", value=mcsrv["debug"]["query"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="SRV Record", value=mcsrv["debug"]["srv"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="Query Mismatch",
-                            value=mcsrv["debug"]["querymismatch"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="IP in SRV",
-                            value=mcsrv["debug"]["ipinsrv"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="CNAME in SRV",
-                            value=mcsrv["debug"]["cnameinsrv"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Animated MOTD",
-                            value=mcsrv["debug"]["animatedmotd"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Cache Time",
-                            value=mcsrv["debug"]["cachetime"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="HTTP Status (MCSrvStat)",
-                            value=mcsrv_status_code,
-                            inline=True,
-                        )
-                        embedVar.set_thumbnail(url=image_link)
-                        await ctx.send(embed=embedVar)
-                except Exception as e:
-                    embedVar = discord.Embed(color=0xC27C0E)
-                    embedVar.description = (
-                        f"Your search for has failed. Please try again.\nReason: {e}"
-                    )
-                    await ctx.send(embed=embedVar)
-
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
-
-    @java.error
-    async def on_message_error(
-        self, ctx: commands.Context, error: commands.CommandError
-    ):
-        if isinstance(error, commands.MissingRequiredArgument):
-            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
-            embedVar.description = f"Missing a required argument: {error.param}"
-            msg = await ctx.send(embed=embedVar, delete_after=10)
-            await msg.delete(delay=10)
-
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
-
-
-class bedrock_mcsrvstats(commands.Cog):
-    def __init__(self, bot):
-        self.bot = bot
-
-    @commands.command(name="bedrockmcsrv", aliases=["bedrock"])
-    async def bedrock(self, ctx, search: str):
-        async with aiohttp.ClientSession(json_serialize=orjson.loads) as session:
-            async with session.get(f"https://api.mcsrvstat.us/bedrock/2/{search}") as r:
-                bedmcsrv = await r.json()
-                bedimage_link = f"https://api.mcsrvstat.us/icon/{search}"
-                bedmcsrv_status_code = r.status
-                try:
-                    if str(bedmcsrv["online"]) == "True":
-                        embedVar = discord.Embed(
-                            title="Information (Bedrock Edition)", color=0x607D8B
-                        )
-                        embedVar.add_field(
-                            name="Online Status", value=bedmcsrv["online"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="Hostname/Domain",
-                            value=bedmcsrv["hostname"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="IP Address", value=bedmcsrv["ip"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="Port", value=bedmcsrv["port"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="Supported/Server Version",
-                            value=bedmcsrv["version"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Map", value=bedmcsrv["map"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="Players Online",
-                            value=bedmcsrv["players"]["online"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Max Online Player Slots",
-                            value=bedmcsrv["players"]["max"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="MOTD",
-                            value=str(bedmcsrv["motd"]["clean"])
-                            .replace("[", "")
-                            .replace("]", "")
-                            .replace("'", ""),
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Protocol", value=bedmcsrv["protocol"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="Ping", value=bedmcsrv["debug"]["ping"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="Query", value=bedmcsrv["debug"]["query"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="Query Mismatch",
-                            value=bedmcsrv["debug"]["querymismatch"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="IP in SRV",
-                            value=bedmcsrv["debug"]["ipinsrv"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="CNAME in SRV",
-                            value=bedmcsrv["debug"]["cnameinsrv"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Animated MOTD",
-                            value=bedmcsrv["debug"]["animatedmotd"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Cache Time",
-                            value=bedmcsrv["debug"]["cachetime"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="API Version",
-                            value=bedmcsrv["debug"]["apiversion"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="HTTP Status (MCSrvStat)",
-                            value=bedmcsrv_status_code,
-                            inline=True,
-                        )
-                        embedVar.set_thumbnail(url=bedimage_link)
-                        await ctx.send(embed=embedVar)
-                    else:
-                        embedVar = discord.Embed(
-                            title="Information (Bedrock Edition)", color=0x607D8B
-                        )
-                        embedVar.add_field(
-                            name="Online Status", value=bedmcsrv["online"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="Hostname/Domain",
-                            value=bedmcsrv["hostname"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="IP Address", value=bedmcsrv["ip"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="Port", value=bedmcsrv["port"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="Ping", value=bedmcsrv["debug"]["ping"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="Query", value=bedmcsrv["debug"]["query"], inline=True
-                        )
-                        embedVar.add_field(
-                            name="Query Mismatch",
-                            value=bedmcsrv["debug"]["querymismatch"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="IP in SRV",
-                            value=bedmcsrv["debug"]["ipinsrv"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="CNAME in SRV",
-                            value=bedmcsrv["debug"]["cnameinsrv"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Animated MOTD",
-                            value=bedmcsrv["debug"]["animatedmotd"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Cache Time",
-                            value=bedmcsrv["debug"]["cachetime"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="HTTP Status (MCSrvStat)",
-                            value=bedmcsrv_status_code,
-                            inline=True,
-                        )
-                        embedVar.set_thumbnail(url=bedimage_link)
-                        await ctx.send(embed=embedVar)
-                except Exception as e:
-                    embedVar = discord.Embed(color=0x607D8B)
-                    embedVar.description = (
-                        f"Your search has failed. Please try again.\nReason: {e}"
-                    )
-                    await ctx.send(embed=embedVar)
-
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
-
-    @bedrock.error
-    async def on_message_error(
-        self, ctx: commands.Context, error: commands.CommandError
-    ):
-        if isinstance(error, commands.MissingRequiredArgument):
-            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
-            embedVar.description = f"Missing a required argument: {error.param}"
-            msg = await ctx.send(embed=embedVar, delete_after=10)
-            await msg.delete(delay=10)
-
-    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
-
-
-def setup(bot):
-    bot.add_cog(mcsrvstats(bot))
-    bot.add_cog(bedrock_mcsrvstats(bot))
+import asyncio
+
+import aiohttp
+import discord
+import orjson
+import uvloop
+from discord.ext import commands
+
+
+class mcsrvstats(commands.Cog):
+    def __init__(self, bot):
+        self.bot = bot
+
+    @commands.command(name="javamcsrv", aliases=["java"])
+    async def java(self, ctx, search: str):
+        async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
+            async with session.get(f"https://api.mcsrvstat.us/2/{search}") as r:
+                mcsrv = await r.json()
+                image_link = f"https://api.mcsrvstat.us/icon/{search}"
+                try:
+                    if str(mcsrv["online"]) == "True":
+                        embedVar = discord.Embed(
+                            title="Infomation (Java Edition)", color=0xC27C0E
+                        )
+                        embedVar.description = str(mcsrv["motd"]["clean"]).replace("[", "").replace("]", "").replace("'", "")
+                        excludedKeys = {"debug", "players", "motd", "icon"}
+                        
+                        for k, v in mcsrv.get("players").items():
+                            embedVar.add_field(name=k, value=v, inline=True)
+                            
+                        for key, val in mcsrv.items():
+                            if key not in excludedKeys:
+                                embedVar.add_field(name=key, value=val, inline=True)
+                        
+                        for key1, value in mcsrv.get("debug").items():
+                            embedVar.add_field(name=key1, value=value, inline=True)
+                        
+                        
+                        embedVar.add_field(name="HTTP Status (McSrvStat)", value=r.status, inline=True)
+                        embedVar.set_thumbnail(url=image_link)
+                        await ctx.send(embed=embedVar)
+                    else:
+                        embedVar = discord.Embed(
+                            title="Infomation (Java Edition)", color=0xC27C0E
+                        )
+                        excludedKeys = {"debug"}
+                        for key, val in mcsrv.items():
+                            if key not in excludedKeys:
+                                embedVar.add_field(name=key, value=val, inline=True)
+
+                        for keyDict, valueDict in mcsrv.get("debug").items():
+                            embedVar.add_field(name=keyDict, value=valueDict, inline=True)
+                        
+                        embedVar.add_field(
+                            name="HTTP Status (MCSrvStat)",
+                            value=r.status,
+                            inline=True,
+                        )
+                        embedVar.set_thumbnail(url=image_link)
+                        await ctx.send(embed=embedVar)
+                except Exception as e:
+                    embedVar = discord.Embed(color=0xC27C0E)
+                    embedVar.description = (
+                        f"Your search for has failed. Please try again.\nReason: {e}"
+                    )
+                    await ctx.send(embed=embedVar)
+
+    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
+
+    @java.error
+    async def on_message_error(
+        self, ctx: commands.Context, error: commands.CommandError
+    ):
+        if isinstance(error, commands.MissingRequiredArgument):
+            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
+            embedVar.description = f"Missing a required argument: {error.param}"
+            msg = await ctx.send(embed=embedVar, delete_after=10)
+            await msg.delete(delay=10)
+
+    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
+
+
+class bedrock_mcsrvstats(commands.Cog):
+    def __init__(self, bot):
+        self.bot = bot
+
+    @commands.command(name="bedrockmcsrv", aliases=["bedrock"])
+    async def bedrock(self, ctx, search: str):
+        async with aiohttp.ClientSession(json_serialize=orjson.loads) as session:
+            async with session.get(f"https://api.mcsrvstat.us/bedrock/2/{search}") as r:
+                bedmcsrv = await r.json()
+                bedimage_link = f"https://api.mcsrvstat.us/icon/{search}"
+                try:
+                    if str(bedmcsrv["online"]) == "True":
+                        embedVar = discord.Embed(
+                                title="Information (Bedrock Edition)", color=0x607D8B
+                            )
+                        embedVar.description = str(bedmcsrv["motd"]["clean"]).replace("[", "").replace("]", "").replace("'", "")
+                        excludedKeys = {"debug", "players", "motd"}
+                        for keys, value in bedmcsrv.get("players").items():
+                            embedVar.add_field(name=keys, value=value, inline=True)
+                        for key, val in bedmcsrv.items():
+                            if key not in excludedKeys:
+                                embedVar.add_field(name=key, value=val, inline=True)
+
+                        for k, v in bedmcsrv.get("debug").items():
+                            embedVar.add_field(name=k, value=v, inline=True)
+                            
+                        embedVar.add_field(name="HTTP Status (McSrvStat)", value=r.status, inline=True)
+                        embedVar.set_thumbnail(url=bedimage_link)
+                        await ctx.send(embed=embedVar)
+                    else:
+                        embedVar = discord.Embed(
+                            title="Information (Bedrock Edition)", color=0x607D8B
+                        )
+                        excludedKeys2 = {"debug"}
+                        for key2, val2 in bedmcsrv.items():
+                            if key2 not in excludedKeys2:
+                                embedVar.add_field(name=key2, value=val2, inline=True)
+
+                        for key3, value3 in bedmcsrv.get("debug").items():
+                            embedVar.add_field(name=key3, value=value3, inline=True)
+                        embedVar.set_thumbnail(url=bedimage_link)
+                        await ctx.send(embed=embedVar)
+                except Exception as e:
+                    embedVar = discord.Embed(color=0x607D8B)
+                    embedVar.description = (
+                        f"Your search has failed. Please try again.\nReason: {e}"
+                    )
+                    await ctx.send(embed=embedVar)
+
+    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
+
+    @bedrock.error
+    async def on_message_error(
+        self, ctx: commands.Context, error: commands.CommandError
+    ):
+        if isinstance(error, commands.MissingRequiredArgument):
+            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
+            embedVar.description = f"Missing a required argument: {error.param}"
+            msg = await ctx.send(embed=embedVar, delete_after=10)
+            await msg.delete(delay=10)
+
+    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
+
+
+def setup(bot):
+    bot.add_cog(mcsrvstats(bot))
+    bot.add_cog(bedrock_mcsrvstats(bot))
-- 
2.34.1

