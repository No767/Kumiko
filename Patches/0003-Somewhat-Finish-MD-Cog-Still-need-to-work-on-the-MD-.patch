From 0d175c9ed1d12a4d08dbffb9ca97290785bff247 Mon Sep 17 00:00:00 2001
From: No767 <73260931+No767@users.noreply.github.com>
Date: Sun, 2 Jan 2022 00:55:05 -0800
Subject: [PATCH] Somewhat Finish MD Cog (Still need to work on the MD Reader)

It's mostly done, but the md reader still needs to be worked on
---
 Bot/Cogs/mangadex.py | 544 +++++++++++++++++++++++++++++++++----------
 1 file changed, 424 insertions(+), 120 deletions(-)

diff --git a/Bot/Cogs/mangadex.py b/Bot/Cogs/mangadex.py
index ffa82e7..91d821c 100644
--- a/Bot/Cogs/mangadex.py
+++ b/Bot/Cogs/mangadex.py
@@ -1,12 +1,14 @@
+import os 
 import aiohttp
 import discord
-import ujson
+import orjson
 from discord.ext import commands
-from dotenv import load_dotenv
 from reactionmenu import ReactionMenu
+from dotenv import load_dotenv
 
 load_dotenv()
 
+MangaDex_API_Key = os.getenv("MangaDex_Access_Token")
 
 class MangaDexV1(commands.Cog):
     def __init__(self, bot):
@@ -14,7 +16,7 @@ class MangaDexV1(commands.Cog):
 
     @commands.command(name="mangadex-search", aliases=["md-search"])
     async def manga(self, ctx, *, manga: str):
-        async with aiohttp.ClientSession(json_serialize=ujson.dumps) as session:
+        async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
             try:
                 async with session.get(
                     f"https://api.mangadex.org/manga/?title={manga}&publicationDemographic[]=none&contentRating[]=safe&order[title]=asc"
@@ -31,70 +33,73 @@ class MangaDexV1(commands.Cog):
                         ) as rp:
                             cover_art_data = await rp.json()
                             cover_art = cover_art_data["data"]["attributes"]["fileName"]
-                            if (
-                                "en" in md_data["data"]["attributes"]["description"]
-                                and md_data["data"]["attributes"]["title"]
-                            ):
+                            if "en" in data["data"][0]["attributes"]["title"]:
                                 embedVar = discord.Embed()
+                                embedVar.title = md_data["data"]["attributes"]["title"]["en"]
+                                embedVar.description = str(md_data["data"]["attributes"]["description"]["en"]).replace("\n", "").replace("\r", "").replace("'", "")
+                                embedVar.add_field(name="Alt Titles", value=str([title["en"] for title in md_data["data"]["attributes"]["altTitles"]]).replace("'", ""), inline=True)
                                 embedVar.add_field(
-                                    name="Title",
-                                    value=md_data["data"]["attributes"]["title"]["en"],
+                                    name="Publication Demographics",
+                                    value=md_data["data"]["attributes"][
+                                        "publicationDemographic"
+                                    ],
                                     inline=True,
                                 )
                                 embedVar.add_field(
-                                    name="Description (English)",
-                                    value=str(
-                                        md_data["data"]["attributes"]["description"][
-                                            "en"
-                                        ]
-                                    )
-                                    .replace("\n", "")
-                                    .replace("\r", "")
-                                    .replace("'", ""),
-                                    inline=False,
+                                    name="Status",
+                                    value=md_data["data"]["attributes"]["status"],
+                                    inline=True,
                                 )
+                                embedVar.add_field(name="Last Volume", value=md_data["data"]["attributes"]["lastVolume"], inline=True)
+                                embedVar.add_field(name="Last Chapter", value=md_data["data"]["attributes"]["lastChapter"], inline=True)
                                 embedVar.add_field(
+                                    name="Tags",
+                                    value=str([str(item["attributes"]["name"]["en"]).replace("\n", "").replace("'", "") for item in md_data["data"]["attributes"]["tags"][0:-1]]),
+                                    inline=True,
+                                )
+                                
+                                embedVar.set_image(
+                                    url=f"https://uploads.mangadex.org/covers/{id}/{cover_art}"
+                                )
+                                await ctx.send(embed=embedVar)
+                            elif "ja" in data["data"][0]["attributes"]["title"]:
+                                embedVar2 = discord.Embed()
+                                embedVar2.title = md_data["data"]["attributes"]["title"]["ja"]
+                                embedVar2.description = str(md_data["data"]["attributes"]["description"]["ja"]).replace(
+                                    "\n", "").replace("\r", "").replace("'", "")
+                                embedVar2.add_field(name="Alt Titles", value=str(
+                                    [title["en"] for title in md_data["data"]["attributes"]["altTitles"]]).replace("'",
+                                                                                                                   ""),
+                                                   inline=True)
+                                embedVar2.add_field(
                                     name="Publication Demographics",
                                     value=md_data["data"]["attributes"][
                                         "publicationDemographic"
                                     ],
                                     inline=True,
                                 )
-                                embedVar.add_field(
+                                embedVar2.add_field(
                                     name="Status",
                                     value=md_data["data"]["attributes"]["status"],
                                     inline=True,
                                 )
-                                embedVar.add_field(
+                                embedVar2.add_field(name="Last Volume",
+                                                   value=md_data["data"]["attributes"]["lastVolume"], inline=True)
+                                embedVar2.add_field(name="Last Chapter",
+                                                   value=md_data["data"]["attributes"]["lastChapter"], inline=True)
+                                embedVar2.add_field(
                                     name="Tags",
-                                    value=[
-                                        str(
-                                            md_data["data"]["attributes"]["tags"][
-                                                "attributes"
-                                            ]["name"]["en"]
-                                        )
-                                        .replace("\n", "")
-                                        .replace("'", "")
-                                        for md_data["data"]["attributes"][
-                                            "tags"
-                                        ] in md_data["data"]["attributes"]["tags"]
-                                    ],
+                                    value=str(
+                                        [str(item["attributes"]["name"]["en"]).replace("\n", "").replace("'", "") for
+                                         item in md_data["data"]["attributes"]["tags"][0:-1]]),
                                     inline=True,
                                 )
-                                embedVar.set_image(
+
+                                embedVar2.set_image(
                                     url=f"https://uploads.mangadex.org/covers/{id}/{cover_art}"
                                 )
-                                await ctx.send(embed=embedVar)
-                            elif (
-                                "ja" in md_data["data"]["attributes"]["description"]
-                                and md_data["data"]["attributes"]["title"]
-                            ):
-                                await ctx.send("prob using jpn desc")
-                            elif (
-                                None in md_data["data"]["attributes"]["description"]
-                                and md_data["data"]["attributes"]["title"]
-                            ):
-                                await ctx.send("nope")
+                                await ctx.send(embed=embedVar2)
+
             except Exception as e:
                 embedVar = discord.Embed()
                 embedVar.description = (
@@ -120,73 +125,378 @@ class MangaDexV2(commands.Cog):
 
     @commands.command(name="mangadex-random", aliases=["md-random"])
     async def manga_random(self, ctx):
-        try:
-            async with aiohttp.ClientSession(json_serialize=ujson.dumps) as session:
-                async with session.get("https://api.mangadex.org/manga/random") as r:
-                    data = await r.json()
-                    id = data["data"]["id"]
-                    cover_art_id = data["data"]["relationships"][2]["id"]
-                    async with session.get(
-                        f"https://api.mangadex.org/cover/{cover_art_id}"
-                    ) as rp:
-                        cover_art_data = await rp.json()
-                        cover_art = cover_art_data["data"]["attributes"]["fileName"]
-                        embedVar = discord.Embed(
-                            title=data["data"]["attributes"]["title"]["en"]
-                        )
-                        embedVar.add_field(
-                            name="Description",
-                            value=[
-                                str(
-                                    data["data"]["attributes"]["description"]["en"]
-                                ).replace("\n", "")
-                            ],
-                            inline=False,
-                        )
-                        embedVar.add_field(
-                            name="Original Language",
-                            value=data["data"]["attributes"]["originalLanguage"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Last Volume",
-                            value=[data["data"]["attributes"]["lastVolume"]],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Last Chapter",
-                            value=[data["data"]["attributes"]["lastChapter"]],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Publication Demographic",
-                            value=data["data"]["attributes"]["publicationDemographic"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Status",
-                            value=data["data"]["attributes"]["status"],
-                            inline=True,
-                        )
-                        embedVar.add_field(
-                            name="Content Rating",
-                            value=data["data"]["attributes"]["contentRating"],
-                            inline=True,
-                        )
-
-                        embedVar.set_image(
-                            url=f"https://uploads.mangadex.org/covers/{id}/{cover_art}"
+        async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
+            async with session.get("https://api.mangadex.org/manga/random") as r:
+                data = await r.json()
+                id = data["data"]["id"]
+                cover_art_id = data["data"]["relationships"][2]["id"]
+                async with session.get(
+                    f"https://api.mangadex.org/cover/{cover_art_id}"
+                ) as rp:
+                    cover_art_data = await rp.json()
+                    cover_art = cover_art_data["data"]["attributes"]["fileName"]
+                    try:
+                        if r.status == 500:
+                            embedError = discord.Embed()
+                            embedError.description = "Sorry, but there was an error. Please try again"
+                            embedError.add_field(name="Reason", value=data["errors"][0]["title"], inline=True)
+                            embedError.add_field(name="Detail", value=data["errors"][0]["detail"], inline=True)
+                            await ctx.send(embed=embedError)
+                        else:
+                            embedVar = discord.Embed(
+                                title=data["data"]["attributes"]["title"]["en"]
+                            )
+                            embedVar.description = str(data["data"]["attributes"]["description"]["en"]).replace("\n", "")
+                            embedVar.add_field(name="Alt Titles", value=str([title["en"] for title in data["data"]["attributes"]["altTitles"]]).replace("'", ""), inline=True)
+                            embedVar.add_field(
+                                name="Original Language",
+                                value=str([data["data"]["attributes"]["originalLanguage"]]).replace("", ""),
+                                inline=True,
+                            )
+                            embedVar.add_field(
+                                name="Last Volume",
+                                value=str([data["data"]["attributes"]["lastVolume"]]).replace("'", ""),
+                                inline=True,
+                            )
+                            embedVar.add_field(
+                                name="Last Chapter",
+                                value=str([data["data"]["attributes"]["lastChapter"]]).replace("'", ""),
+                                inline=True,
+                            )
+                            embedVar.add_field(
+                                name="Publication Demographic",
+                                value=data["data"]["attributes"]["publicationDemographic"],
+                                inline=True,
+                            )
+                            embedVar.add_field(
+                                name="Status",
+                                value=data["data"]["attributes"]["status"],
+                                inline=True,
+                            )
+                            embedVar.add_field(
+                                name="Content Rating",
+                                value=data["data"]["attributes"]["contentRating"],
+                                inline=True,
+                            )
+                            embedVar.add_field(
+                                name="Tags",
+                                value=str(
+                                    [item["attributes"]["name"]["en"] for
+                                     item in data["data"]["attributes"]["tags"][0:-1]]).replace("\n", "").replace("'", ""),
+                                inline=True,
+                            )
+                            embedVar.set_image(
+                                url=f"https://uploads.mangadex.org/covers/{id}/{cover_art}"
+                            )
+                            await ctx.send(embed=embedVar)
+                    except Exception as e:
+                        embedVar = discord.Embed()
+                        embedVar.description = (
+                            f"The query could not be performed. Please try again."
                         )
+                        embedVar.add_field(name="Reason", value=e, inline=True)
                         await ctx.send(embed=embedVar)
-        except Exception as e:
-            embedVar = discord.Embed()
-            embedVar.description = (
-                f"The query could not be performed. Please try again."
-            )
-            embedVar.add_field(name="Reason", value=e, inline=True)
-            await ctx.send(embed=embedVar)
+    @manga_random.error
+    async def on_message_error(
+        self, ctx: commands.Context, error: commands.CommandError
+    ):
+        if isinstance(error, commands.MissingRequiredArgument):
+            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
+            embedVar.description = f"Missing a required argument: {error.param}"
+            msg = await ctx.send(embed=embedVar, delete_after=10)
+            await msg.delete(delay=10)
 
+class MangaDexV3(commands.Cog):
+    def __init__(self, bot):
+        self.bot = bot
+        
+    @commands.command(name="mangadex-scanlation-search", aliases=["md-ss"])
+    async def scanlation_search(self, ctx, *, search: str):
+        async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
+            params = {"limit": 1, "name": search, "order[name]": "asc", "order[relevance]": "desc"}
+            async with session.get("https://api.mangadex.org/group", params=params) as totally_another_response:
+                md_data2 = await totally_another_response.json()
+                try:
+                    if md_data2["data"] is None:
+                        embed1 = discord.Embed()
+                        embed1.description = "Sorry, but no results were found... Please try again."
+                        embed1.add_field(name="Total", value=md_data2["total"], inline=True)
+                        embed1.add_field(name="HTTP Status", value=totally_another_response.status, inline=True)
+                        await ctx.send(embed=embed1)
+                    else:
+                        embed2 = discord.Embed()
+                        embed2.title = md_data2["data"][0]["attributes"]["name"]
+                        embed2.description = md_data2["data"][0]["attributes"]["description"]
+                        embed2.add_field(name="Alt Names", value=md_data2["data"][0]["attributes"]["altNames"], inline=True)
+                        embed2.add_field(name="Website", value=str([md_data2["data"][0]["attributes"]["website"]]).replace("'", ""), inline=True)
+                        embed2.add_field(name="IRC Server", value=md_data2["data"][0]["attributes"]["ircServer"], inline=True)
+                        embed2.add_field(name="Discord", value=f"https://discord.gg/{md_data2['data'][0]['attributes']['discord']}", inline=True)
+                        embed2.add_field(name="Contact Email", value=str([md_data2["data"][0]["attributes"]["contactEmail"]]).replace("'", ""), inline=True)
+                        embed2.add_field(name="Twitter", value=md_data2["data"][0]["attributes"]["twitter"], inline=True)
+                        embed2.add_field(name="Focused Languages", value=md_data2["data"][0]["attributes"]["focusedLanguages"], inline=True)
+                        embed2.add_field(name="Official", value=md_data2["data"][0]["attributes"]["official"], inline=True)
+                        embed2.add_field(name="Verified", value=md_data2["data"][0]["attributes"]["verified"], inline=True)
+                        embed2.add_field(name="Created At", value=md_data2["data"][0]["attributes"]["createdAt"], inline=True)
+                        embed2.add_field(name="Updated At", value=md_data2["data"][0]["attributes"]["updatedAt"], inline=True)
+                        embed2.add_field(name="Inactive", value=md_data2["data"][0]["attributes"]["inactive"], inline=True)
+                        await ctx.send(embed=embed2)
+                except Exception as e:
+                    embedVar = discord.Embed()
+                    embedVar.description = (
+                        f"The query could not be performed. Please try again."
+                    )
+                    embedVar.add_field(name="Reason", value=e, inline=True)
+                    await ctx.send(embed=embedVar)
 
+    @scanlation_search.error
+    async def on_message_error(
+        self, ctx: commands.Context, error: commands.CommandError
+    ):
+        if isinstance(error, commands.MissingRequiredArgument):
+            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
+            embedVar.description = f"Missing a required argument: {error.param}"
+            msg = await ctx.send(embed=embedVar, delete_after=10)
+            await msg.delete(delay=10)
+
+class MangaDexV4(commands.Cog):
+    def __init__(self, bot: commands.Bot):
+        self.bot = bot
+        
+    @commands.command(name="mangadex-scanlation-id", aliases=["md-si"])
+    async def scanlation_id(self, ctx,  *, scanlation_id: str):
+        async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
+            async with session.get(f"https://api.mangadex.org/group/{scanlation_id}") as another_response:
+                payload = await another_response.json()
+                try:
+                    if payload["data"] is None:
+                        embed1 = discord.Embed()
+                        embed1.description = "Sorry, but no results were found... Please try again."
+                        embed1.add_field(name="Total", value=payload["total"], inline=True)
+                        embed1.add_field(name="HTTP Status", value=another_response.status, inline=True)
+                        await ctx.send(embed=embed1)
+                    else:
+                        embed2 = discord.Embed()
+                        embed2.title = payload["data"]["attributes"]["name"]
+                        embed2.description = payload["data"]["attributes"]["description"]
+                        embed2.add_field(name="Alt Names", value=payload["data"]["attributes"]["altNames"], inline=True)
+                        embed2.add_field(name="Website", value=str([payload["data"]["attributes"]["website"]]).replace("'", ""), inline=True)
+                        embed2.add_field(name="IRC Server", value=payload["data"]["attributes"]["ircServer"], inline=True)
+                        embed2.add_field(name="Discord", value=f"https://discord.gg/{payload['data']['attributes']['discord']}", inline=True)
+                        embed2.add_field(name="Contact Email", value=str([payload["data"]["attributes"]["contactEmail"]]).replace("'", ""), inline=True)
+                        embed2.add_field(name="Twitter", value=payload["data"]["attributes"]["twitter"], inline=True)
+                        embed2.add_field(name="Focused Languages", value=payload["data"]["attributes"]["focusedLanguages"], inline=True)
+                        embed2.add_field(name="Official", value=payload["data"]["attributes"]["official"], inline=True)
+                        embed2.add_field(name="Verified", value=payload["data"]["attributes"]["verified"], inline=True)
+                        embed2.add_field(name="Created At", value=payload["data"]["attributes"]["createdAt"], inline=True)
+                        embed2.add_field(name="Updated At", value=payload["data"]["attributes"]["updatedAt"], inline=True)
+                        embed2.add_field(name="Inactive", value=payload["data"]["attributes"]["inactive"], inline=True)
+                        await ctx.send(embed=embed2)
+                except Exception as e:
+                    embedVar = discord.Embed()
+                    embedVar.description = (
+                        f"The query could not be performed. Please try again."
+                    )
+                    embedVar.add_field(name="Reason", value=e, inline=True)
+                    await ctx.send(embed=embedVar)
+    @scanlation_id.error
+    async def on_message_error(
+        self, ctx: commands.Context, error: commands.CommandError
+    ):
+        if isinstance(error, commands.MissingRequiredArgument):
+            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
+            embedVar.description = f"Missing a required argument: {error.param}"
+            msg = await ctx.send(embed=embedVar, delete_after=10)
+            await msg.delete(delay=10)
+            
+class MangaDexV5(commands.Cog):
+    def __init__(self, bot):
+        self.bot = bot
+        
+    @commands.command(name="mangadex-user", aliases=["md-user"])
+    async def user(self, ctx, *, user_id: str):
+        async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
+            async with session.get(f"https://api.mangadex.org/user/{user_id}") as rep:
+                payload = await rep.json()
+                try:
+                    embed = discord.Embed()
+                    embed.title = payload["data"]["attributes"]["username"]
+                    embed.add_field(name="ID", value=payload["data"]["id"], inline=True)
+                    embed.add_field(name="Type", value=payload["data"]["type"], inline=True)
+                    embed.add_field(name="Roles", value=payload["data"]["attributes"]["roles"], inline=True)
+                    await ctx.send(embed=embed)
+                except Exception as e:
+                    embedVar = discord.Embed()
+                    embedVar.description = (
+                        f"The query could not be performed. Please try again."
+                    )
+                    embedVar.add_field(name="Reason", value=e, inline=True)
+                    await ctx.send(embed=embedVar)
+    
+    @user.error
+    async def on_message_error(
+        self, ctx: commands.Context, error: commands.CommandError
+    ):
+        if isinstance(error, commands.MissingRequiredArgument):
+            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
+            embedVar.description = f"Missing a required argument: {error.param}"
+            msg = await ctx.send(embed=embedVar, delete_after=10)
+            await msg.delete(delay=10)
+
+class MangaDexV6(commands.Cog):
+    def __init__(self, bot):
+        self.bot = bot
+        
+    @commands.command(name="mangadex-author", aliases=["md-author"])
+    async def author(self, ctx, *, author_name: str):
+        async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
+            params = {"limit": 1, "name": author_name, "order[name]": "asc"}
+            async with session.get("https://api.mangadex.org/author", params=params) as author_response:
+                author_payload = await author_response.json()
+                try:
+                    if author_payload["data"][0]["attributes"]["imageUrl"] is None:
+                        embedVar = discord.Embed()
+                        embedVar.title = author_payload["data"][0]["attributes"]["name"]
+                        embedVar.description = author_payload["data"][0]["attributes"]["biography"]
+                        embedVar.add_field(name="ID", value=author_payload["data"][0]["id"], inline=True)
+                        embedVar.add_field(name="Twitter", value=author_payload["data"][0]["attributes"]["twitter"], inline=True)
+                        embedVar.add_field(name="Pixiv", value=author_payload["data"][0]["attributes"]["pixiv"], inline=True)
+                        embedVar.add_field(name="MelonBook", value=author_payload["data"][0]["attributes"]["melonBook"], inline=True)
+                        embedVar.add_field(name="FanBox", value=author_payload["data"][0]["attributes"]["fanBox"], inline=True)
+                        embedVar.add_field(name="Booth", value=author_payload["data"][0]["attributes"]["booth"], inline=True)
+                        embedVar.add_field(name="NicoVideo", value=author_payload["data"][0]["attributes"]["nicoVideo"], inline=True)
+                        embedVar.add_field(name="Skeb", value=author_payload["data"][0]["attributes"]["skeb"], inline=True)
+                        embedVar.add_field(name="Fantia", value=author_payload["data"][0]["id"], inline=True)
+                        embedVar.add_field(name="Tumblr", value=author_payload["data"][0]["attributes"]["tumblr"], inline=True)
+                        embedVar.add_field(name="YouTube", value=author_payload["data"][0]["attributes"]["youtube"], inline=True)
+                        embedVar.add_field(name="Website", value=author_payload["data"][0]["attributes"]["website"], inline=True)
+                        embedVar.add_field(name="Created At", value=author_payload["data"][0]["attributes"]["createdAt"], inline=True)
+                        embedVar.add_field(name="Updated At", value=author_payload["data"][0]["attributes"]["updatedAt"], inline=True)
+                        await ctx.send(embed=embedVar)
+                    else:
+                        embedVar2 = discord.Embed()
+                        embedVar2.title = author_payload["data"][0]["attributes"]["name"]
+                        embedVar2.description = author_payload["data"][0]["attributes"]["biography"]
+                        embedVar2.add_field(name="ID", value=author_payload["data"][0]["id"], inline=True)
+                        embedVar2.add_field(name="Twitter", value=author_payload["data"][0]["attributes"]["twitter"], inline=True)
+                        embedVar2.add_field(name="Pixiv", value=author_payload["data"][0]["attributes"]["pixiv"], inline=True)
+                        embedVar2.add_field(name="MelonBook", value=author_payload["data"][0]["attributes"]["melonbook"], inline=True)
+                        embedVar2.add_field(name="FanBox", value=author_payload["data"][0]["attributes"]["fanbox"], inline=True)
+                        embedVar2.add_field(name="Booth", value=author_payload["data"][0]["attributes"]["booth"], inline=True)
+                        embedVar2.add_field(name="NicoVideo", value=author_payload["data"][0]["attributes"]["nico"], inline=True)
+                        embedVar2.add_field(name="Sekb", value=author_payload["data"][0]["attributes"]["sekb"], inline=True)
+                        embedVar2.add_field(name="Fantia", value=author_payload["data"][0]["id"], inline=True)
+                        embedVar2.add_field(name="Tumblr", value=author_payload["data"][0]["attributes"]["tumblr"], inline=True)
+                        embedVar2.add_field(name="YouTube", value=author_payload["data"][0]["attributes"]["youtube"], inline=True)
+                        embedVar2.add_field(name="Website", value=author_payload["data"][0]["attributes"]["website"], inline=True)
+                        embedVar2.add_field(name="Created At", value=author_payload["data"][0]["attributes"]["createdAt"], inline=True)
+                        embedVar2.add_field(name="Updated At", value=author_payload["data"][0]["attributes"]["updatedAt"], inline=True)
+                        embedVar2.set_image(url=author_payload["data"][0]["attributes"]["imageUrl"])
+                        await ctx.send(embed=embedVar2)
+                except Exception as e:
+                    embedVar = discord.Embed()
+                    embedVar.description = (
+                        f"The query could not be performed. Please try again."
+                    )
+                    embedVar.add_field(name="Reason", value=e, inline=True)
+                    await ctx.send(embed=embedVar)
+    @author.error
+    async def on_message_error(
+        self, ctx: commands.Context, error: commands.CommandError
+    ):
+        if isinstance(error, commands.MissingRequiredArgument):
+            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
+            embedVar.description = f"Missing a required argument: {error.param}"
+            msg = await ctx.send(embed=embedVar, delete_after=10)
+            await msg.delete(delay=10)
+                    
+class MangaDexV7(commands.Cog):
+    def __init__(self, bot):
+        self.bot = bot
+    
+    @commands.command(name="mangadex-author-id", aliases=["md-author-id"])
+    async def author_id(self, ctx, *, author_id: str):
+        async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
+            async with session.get(f"https://api.mangadex.org/author/{author_id}") as author_r:
+                author_data = await author_r.json()
+                try:
+                    if author_data["data"]["attributes"]["imageUrl"] is None:
+                        embedVar = discord.Embed()
+                        embedVar.title = author_data["data"]["attributes"]["name"]
+                        embedVar.description = author_data["data"]["attributes"]["biography"]
+                        embedVar.add_field(name="ID", value=author_data["data"]["id"], inline=True)
+                        embedVar.add_field(name="Twitter", value=author_data["data"]["attributes"]["twitter"],
+                                           inline=True)
+                        embedVar.add_field(name="Pixiv", value=author_data["data"]["attributes"]["pixiv"],
+                                           inline=True)
+                        embedVar.add_field(name="MelonBook", value=author_data["data"]["attributes"]["melonBook"],
+                                           inline=True)
+                        embedVar.add_field(name="FanBox", value=author_data["data"]["attributes"]["fanBox"],
+                                           inline=True)
+                        embedVar.add_field(name="Booth", value=author_data["data"]["attributes"]["booth"],
+                                           inline=True)
+                        embedVar.add_field(name="NicoVideo", value=author_data["data"]["attributes"]["nicoVideo"],
+                                           inline=True)
+                        embedVar.add_field(name="Skeb", value=author_data["data"]["attributes"]["skeb"], inline=True)
+                        embedVar.add_field(name="Fantia", value=author_data["data"]["id"], inline=True)
+                        embedVar.add_field(name="Tumblr", value=author_data["data"]["attributes"]["tumblr"],
+                                           inline=True)
+                        embedVar.add_field(name="YouTube", value=author_data["data"]["attributes"]["youtube"],
+                                           inline=True)
+                        embedVar.add_field(name="Website", value=author_data["data"]["attributes"]["website"],
+                                           inline=True)
+                        embedVar.add_field(name="Created At", value=author_data["data"]["attributes"]["createdAt"],
+                                           inline=True)
+                        embedVar.add_field(name="Updated At", value=author_data["data"]["attributes"]["updatedAt"],
+                                           inline=True)
+                        await ctx.send(embed=embedVar)
+                    else:
+                        embedVar2 = discord.Embed()
+                        embedVar2.title = author_data["data"]["attributes"]["name"]
+                        embedVar2.description = author_data["data"]["attributes"]["biography"]
+                        embedVar2.add_field(name="ID", value=author_data["data"]["id"], inline=True)
+                        embedVar2.add_field(name="Twitter", value=author_data["data"]["attributes"]["twitter"],
+                                            inline=True)
+                        embedVar2.add_field(name="Pixiv", value=author_data["data"]["attributes"]["pixiv"],
+                                            inline=True)
+                        embedVar2.add_field(name="MelonBook", value=author_data["data"]["attributes"]["melonbook"],
+                                            inline=True)
+                        embedVar2.add_field(name="FanBox", value=author_data["data"]["attributes"]["fanbox"],
+                                            inline=True)
+                        embedVar2.add_field(name="Booth", value=author_data["data"]["attributes"]["booth"],
+                                            inline=True)
+                        embedVar2.add_field(name="NicoVideo", value=author_data["data"]["attributes"]["nico"],
+                                            inline=True)
+                        embedVar2.add_field(name="Sekb", value=author_data["data"]["attributes"]["sekb"], inline=True)
+                        embedVar2.add_field(name="Fantia", value=author_data["data"]["id"], inline=True)
+                        embedVar2.add_field(name="Tumblr", value=author_data["data"]["attributes"]["tumblr"],
+                                            inline=True)
+                        embedVar2.add_field(name="YouTube", value=author_data["data"]["attributes"]["youtube"],
+                                            inline=True)
+                        embedVar2.add_field(name="Website", value=author_data["data"]["attributes"]["website"],
+                                            inline=True)
+                        embedVar2.add_field(name="Created At", value=author_data["data"]["attributes"]["createdAt"],
+                                            inline=True)
+                        embedVar2.add_field(name="Updated At", value=author_data["data"]["attributes"]["updatedAt"],
+                                            inline=True)
+                        embedVar2.set_image(url=author_data["data"]["attributes"]["imageUrl"])
+                        await ctx.send(embed=embedVar2)
+                except Exception as e:
+                    embedVar = discord.Embed()
+                    embedVar.description = (
+                        f"The query could not be performed. Please try again."
+                    )
+                    embedVar.add_field(name="Reason", value=e, inline=True)
+                    await ctx.send(embed=embedVar)
+                    
+    @author_id.error
+    async def on_message_error(
+        self, ctx: commands.Context, error: commands.CommandError
+    ):
+        if isinstance(error, commands.MissingRequiredArgument):
+            embedVar = discord.Embed(color=discord.Color.from_rgb(255, 51, 51))
+            embedVar.description = f"Missing a required argument: {error.param}"
+            msg = await ctx.send(embed=embedVar, delete_after=10)
+            await msg.delete(delay=10)
 class MangaDexReaderV1(commands.Cog):
     def __init__(self, bot):
         self.bot = bot
@@ -195,7 +505,7 @@ class MangaDexReaderV1(commands.Cog):
     @commands.command(name="mangadex-read", aliases=["md-read"])
     async def manga_read(self, ctx, *, id: str):
         try:
-            async with aiohttp.ClientSession(json_serialize=ujson.dumps) as session:
+            async with aiohttp.ClientSession(json_serialize=orjson.dumps) as session:
                 async with session.get(f"https://api.mangadex.org/chapter/{id}") as r:
                     data = await r.json()
                     chapter_hash = data["data"]["attributes"]["hash"]
@@ -237,17 +547,11 @@ class MangaDexReaderV1(commands.Cog):
             await ctx.send(e)
 
 
-class discordButtonTest(commands.Cog):
-    def __init__(self, bot):
-        self.bot = bot
-
-    @commands.command(name="button-test")
-    async def user(self, ctx):
-        await ctx.send("help me")
-
-
 def setup(bot):
     bot.add_cog(MangaDexV1(bot))
     bot.add_cog(MangaDexV2(bot))
-    bot.add_cog(MangaDexReaderV1(bot))
-    bot.add_cog(discordButtonTest(bot))
+    bot.add_cog(MangaDexV3(bot))
+    bot.add_cog(MangaDexV4(bot))
+    bot.add_cog(MangaDexV5(bot))
+    bot.add_cog(MangaDexV6(bot))
+    bot.add_cog(MangaDexV7(bot))
-- 
2.33.1.windows.1

